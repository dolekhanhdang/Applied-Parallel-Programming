2023-05-29 21:55:45,152   load - DEBUG:tag: XResolution (282) - type: rational (5) Tag Location: 22 - Data Location: 74 - value: b'H\x00\x00\x00\x01\x00\x00\x00'
2023-05-29 21:55:45,153   load - DEBUG:tag: YResolution (283) - type: rational (5) Tag Location: 34 - Data Location: 82 - value: b'H\x00\x00\x00\x01\x00\x00\x00'
2023-05-29 21:55:45,153   load - DEBUG:tag: ResolutionUnit (296) - type: short (3) - value: b'\x02\x00'
2023-05-29 21:55:45,153   load - DEBUG:tag: YCbCrPositioning (531) - type: short (3) - value: b'\x02\x00'
2023-05-29 21:55:45,153   load - DEBUG:tag: ExifIFD (34665) - type: long (4) - value: b'Z\x00\x00\x00'
2023-05-29 21:55:45,206   load - DEBUG:tag: Make (271) - type: string (2) Tag Location: 22 - Data Location: 32474 - value: b'PENTAX Corporation \x00'
2023-05-29 21:55:45,207   load - DEBUG:tag: Model (272) - type: string (2) Tag Location: 34 - Data Location: 32494 - value: b'PENTAX Optio S4\x00'
2023-05-29 21:55:45,207   load - DEBUG:tag: XResolution (282) - type: rational (5) Tag Location: 46 - Data Location: 242 - value: b'H\x00\x00\x00\x01\x00\x00\x00'
2023-05-29 21:55:45,207   load - DEBUG:tag: YResolution (283) - type: rational (5) Tag Location: 58 - Data Location: 250 - value: b'H\x00\x00\x00\x01\x00\x00\x00'
2023-05-29 21:55:45,207   load - DEBUG:tag: PageName (285) - type: string (2) Tag Location: 70 - Data Location: 258 - value: <table: 125 bytes>
2023-05-29 21:55:45,207   load - DEBUG:tag: ResolutionUnit (296) - type: short (3) - value: b'\x02\x00'
2023-05-29 21:55:45,207   load - DEBUG:tag: Software (305) - type: string (2) Tag Location: 94 - Data Location: 32510 - value: b'Optio S4 Ver 1.00\x00'
2023-05-29 21:55:45,207   load - DEBUG:tag: DateTime (306) - type: string (2) Tag Location: 106 - Data Location: 32528 - value: b'2005:03:02 08:26:48\x00'
2023-05-29 21:55:45,207   load - DEBUG:tag: YCbCrPositioning (531) - type: short (3) - value: b'\x02\x00'
2023-05-29 21:55:45,207   load - DEBUG:tag: ReferenceBlackWhite (532) - type: rational (5) Tag Location: 130 - Data Location: 384 - value: <table: 48 bytes>
2023-05-29 21:55:45,207   load - DEBUG:tag: ExifIFD (34665) - type: long (4) - value: b'\xb0\x01\x00\x00'
2023-05-29 21:55:45,207   load - DEBUG:tag: GPSInfoIFD (34853) - type: long (4) - value: b'\xc8~\x00\x00'
2023-05-29 21:55:45,207   load - DEBUG:tag: unknown (50341) - type: undefined (7) Tag Location: 166 - Data Location: 32548 - value: <table: 40 bytes>
2023-05-29 21:55:45,284   load - DEBUG:tag: Make (271) - type: string (2) Tag Location: 22 - Data Location: 122 - value: b'Canon\x00'
2023-05-29 21:55:45,284   load - DEBUG:tag: Model (272) - type: string (2) Tag Location: 34 - Data Location: 128 - value: b'Canon PowerShot A510\x00'
2023-05-29 21:55:45,284   load - DEBUG:tag: Orientation (274) - type: short (3) - value: b'\x01\x00'
2023-05-29 21:55:45,284   load - DEBUG:tag: XResolution (282) - type: rational (5) Tag Location: 58 - Data Location: 160 - value: b'\xb4\x00\x00\x00\x01\x00\x00\x00'
2023-05-29 21:55:45,284   load - DEBUG:tag: YResolution (283) - type: rational (5) Tag Location: 70 - Data Location: 168 - value: b'\xb4\x00\x00\x00\x01\x00\x00\x00'
2023-05-29 21:55:45,284   load - DEBUG:tag: ResolutionUnit (296) - type: short (3) - value: b'\x02\x00'
2023-05-29 21:55:45,284   load - DEBUG:tag: DateTime (306) - type: string (2) Tag Location: 94 - Data Location: 176 - value: b'2005:06:11 16:50:31\x00'
2023-05-29 21:55:45,284   load - DEBUG:tag: YCbCrPositioning (531) - type: short (3) - value: b'\x01\x00'
2023-05-29 21:55:45,284   load - DEBUG:tag: ExifIFD (34665) - type: long (4) - value: b'\xc4\x00\x00\x00'
2023-05-29 21:55:45,288   load - DEBUG:tag: Make (271) - type: string (2) Tag Location: 22 - Data Location: 122 - value: b'Canon\x00'
2023-05-29 21:55:45,288   load - DEBUG:tag: Model (272) - type: string (2) Tag Location: 34 - Data Location: 128 - value: b'Canon PowerShot A20\x00'
2023-05-29 21:55:45,288   load - DEBUG:tag: Orientation (274) - type: short (3) - value: b'\x01\x00'
2023-05-29 21:55:45,288   load - DEBUG:tag: XResolution (282) - type: rational (5) Tag Location: 58 - Data Location: 148 - value: b'\xb4\x00\x00\x00\x01\x00\x00\x00'
2023-05-29 21:55:45,288   load - DEBUG:tag: YResolution (283) - type: rational (5) Tag Location: 70 - Data Location: 156 - value: b'\xb4\x00\x00\x00\x01\x00\x00\x00'
2023-05-29 21:55:45,288   load - DEBUG:tag: ResolutionUnit (296) - type: short (3) - value: b'\x02\x00'
2023-05-29 21:55:45,288   load - DEBUG:tag: DateTime (306) - type: string (2) Tag Location: 94 - Data Location: 164 - value: b'2006:12:19 22:50:01\x00\x00'
2023-05-29 21:55:45,288   load - DEBUG:tag: YCbCrPositioning (531) - type: short (3) - value: b'\x01\x00'
2023-05-29 21:55:45,288   load - DEBUG:tag: ExifIFD (34665) - type: long (4) - value: b'\xb9\x00\x00\x00'
2023-05-29 21:55:46,153   load - DEBUG:tag: Make (271) - type: string (2) Tag Location: 22 - Data Location: 134 - value: b'EASTMAN KODAK COMPANY\x00'
2023-05-29 21:55:46,153   load - DEBUG:tag: Model (272) - type: string (2) Tag Location: 34 - Data Location: 156 - value: b'KODAK C310 DIGITAL CAMERA\x00'
2023-05-29 21:55:46,153   load - DEBUG:tag: Orientation (274) - type: short (3) - value: b'\x01\x00'
2023-05-29 21:55:46,153   load - DEBUG:tag: XResolution (282) - type: rational (5) Tag Location: 58 - Data Location: 182 - value: b'\x00\x00@C\x00\x00\x00\x01'
2023-05-29 21:55:46,153   load - DEBUG:tag: YResolution (283) - type: rational (5) Tag Location: 70 - Data Location: 190 - value: b'\x00\x00@C\x00\x00\x00\x01'
2023-05-29 21:55:46,153   load - DEBUG:tag: ResolutionUnit (296) - type: short (3) - value: b'\x02\x00'
2023-05-29 21:55:46,153   load - DEBUG:tag: Software (305) - type: string (2) Tag Location: 94 - Data Location: 198 - value: b'Version 1.0000 \x00'
2023-05-29 21:55:46,153   load - DEBUG:tag: DateTime (306) - type: string (2) Tag Location: 106 - Data Location: 214 - value: b'2007:02:26 09:45:20\x00'
2023-05-29 21:55:46,153   load - DEBUG:tag: YCbCrPositioning (531) - type: short (3) - value: b'\x01\x00'
2023-05-29 21:55:46,153   load - DEBUG:tag: ExifIFD (34665) - type: long (4) - value: b'\xea\x00\x00\x00'
2023-05-29 21:55:46,270   load - DEBUG:tag: ImageDescription (270) - type: string (2) Tag Location: 22 - Data Location: 158 - value: b'Sierra Exif JPEG               \x00'
2023-05-29 21:55:46,270   load - DEBUG:tag: Make (271) - type: string (2) Tag Location: 34 - Data Location: 190 - value: b'OLYMPUS IMAGING CORP.\x00'
2023-05-29 21:55:46,270   load - DEBUG:tag: Model (272) - type: string (2) Tag Location: 46 - Data Location: 214 - value: b'C170,D425\x00'
2023-05-29 21:55:46,270   load - DEBUG:tag: Orientation (274) - type: short (3) - value: b'\x01\x00'
2023-05-29 21:55:46,270   load - DEBUG:tag: XResolution (282) - type: rational (5) Tag Location: 70 - Data Location: 238 - value: b'H\x00\x00\x00\x01\x00\x00\x00'
2023-05-29 21:55:46,270   load - DEBUG:tag: YResolution (283) - type: rational (5) Tag Location: 82 - Data Location: 246 - value: b'H\x00\x00\x00\x01\x00\x00\x00'
2023-05-29 21:55:46,270   load - DEBUG:tag: ResolutionUnit (296) - type: short (3) - value: b'\x02\x00'
2023-05-29 21:55:46,270   load - DEBUG:tag: Software (305) - type: string (2) Tag Location: 106 - Data Location: 254 - value: b'Version 1.0\x00'
2023-05-29 21:55:46,270   load - DEBUG:tag: DateTime (306) - type: string (2) Tag Location: 118 - Data Location: 286 - value: b'2005:12:07 10:19:20\x00'
2023-05-29 21:55:46,270   load - DEBUG:tag: YCbCrPositioning (531) - type: short (3) - value: b'\x02\x00'
2023-05-29 21:55:46,270   load - DEBUG:tag: ExifIFD (34665) - type: long (4) - value: b'\xe4\x03\x00\x00'
2023-05-29 21:55:46,270   load - DEBUG:tag: unknown (50341) - type: undefined (7) Tag Location: 154 - Data Location: 306 - value: <table: 690 bytes>
2023-05-29 21:55:55,535   ensure_initialized - INFO:init
2023-05-29 21:55:55,536   safe_cuda_api_call - DEBUG:call driver api: cuInit
2023-05-29 21:55:55,547   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:55:55,547   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:55:55,547   safe_cuda_api_call - DEBUG:call driver api: cuDeviceGetCount
2023-05-29 21:55:55,547   safe_cuda_api_call - DEBUG:call driver api: cuDeviceGet
2023-05-29 21:55:55,547   safe_cuda_api_call - DEBUG:call driver api: cuDeviceGetAttribute
2023-05-29 21:55:55,547   safe_cuda_api_call - DEBUG:call driver api: cuDeviceGetAttribute
2023-05-29 21:55:55,547   safe_cuda_api_call - DEBUG:call driver api: cuDeviceGetName
2023-05-29 21:55:55,547   safe_cuda_api_call - DEBUG:call driver api: cuDeviceGetUuid_v2
2023-05-29 21:55:55,547   safe_cuda_api_call - DEBUG:call driver api: cuDevicePrimaryCtxRetain
2023-05-29 21:55:55,606   safe_cuda_api_call - DEBUG:call driver api: cuCtxPushCurrent_v2
2023-05-29 21:55:55,606   safe_cuda_api_call - DEBUG:call driver api: cuMemGetInfo_v2
2023-05-29 21:55:55,607   safe_cuda_api_call - DEBUG:call driver api: cuMemAlloc_v2
2023-05-29 21:55:55,607   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:55:55,607   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:55:55,607   safe_cuda_api_call - DEBUG:call driver api: cuMemcpyHtoD_v2
2023-05-29 21:55:55,611   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:55:55,612   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:55:55,612   safe_cuda_api_call - DEBUG:call driver api: cuMemAlloc_v2
2023-05-29 21:55:55,612   safe_cuda_api_call - DEBUG:call driver api: cuMemcpyHtoD_v2
2023-05-29 21:55:55,687   __init__ - DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=5)
           2	LOAD_GLOBAL(arg=0, lineno=5)
           4	LOAD_METHOD(arg=1, lineno=5)
           6	LOAD_CONST(arg=1, lineno=5)
           8	CALL_METHOD(arg=1, lineno=5)
          10	UNPACK_SEQUENCE(arg=2, lineno=5)
          12	STORE_FAST(arg=5, lineno=5)
          14	STORE_FAST(arg=6, lineno=5)
          16	LOAD_FAST(arg=5, lineno=6)
          18	LOAD_FAST(arg=2, lineno=6)
          20	COMPARE_OP(arg=5, lineno=6)
          22	POP_JUMP_IF_TRUE(arg=32, lineno=6)
          24	LOAD_FAST(arg=6, lineno=6)
          26	LOAD_FAST(arg=2, lineno=6)
          28	COMPARE_OP(arg=5, lineno=6)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=6)
>         32	LOAD_CONST(arg=0, lineno=7)
          34	RETURN_VALUE(arg=None, lineno=7)
>         36	LOAD_CONST(arg=2, lineno=8)
          38	STORE_FAST(arg=7, lineno=8)
          40	LOAD_GLOBAL(arg=2, lineno=9)
          42	LOAD_FAST(arg=3, lineno=9)
          44	CALL_FUNCTION(arg=1, lineno=9)
          46	GET_ITER(arg=None, lineno=9)
>         48	FOR_ITER(arg=40, lineno=9)
          50	STORE_FAST(arg=8, lineno=9)
          52	LOAD_FAST(arg=7, lineno=10)
          54	LOAD_FAST(arg=1, lineno=10)
          56	LOAD_FAST(arg=0, lineno=10)
          58	LOAD_FAST(arg=5, lineno=10)
          60	LOAD_FAST(arg=8, lineno=10)
          62	BUILD_TUPLE(arg=2, lineno=10)
          64	BINARY_SUBSCR(arg=None, lineno=10)
          66	LOAD_FAST(arg=0, lineno=10)
          68	LOAD_FAST(arg=6, lineno=10)
          70	LOAD_FAST(arg=8, lineno=10)
          72	BUILD_TUPLE(arg=2, lineno=10)
          74	BINARY_SUBSCR(arg=None, lineno=10)
          76	BINARY_SUBTRACT(arg=None, lineno=10)
          78	LOAD_CONST(arg=1, lineno=10)
          80	BINARY_POWER(arg=None, lineno=10)
          82	BINARY_MULTIPLY(arg=None, lineno=10)
          84	INPLACE_SUBTRACT(arg=None, lineno=10)
          86	STORE_FAST(arg=7, lineno=10)
          88	JUMP_ABSOLUTE(arg=48, lineno=10)
>         90	LOAD_GLOBAL(arg=3, lineno=11)
          92	LOAD_METHOD(arg=4, lineno=11)
          94	LOAD_FAST(arg=7, lineno=11)
          96	CALL_METHOD(arg=1, lineno=11)
          98	LOAD_FAST(arg=4, lineno=11)
         100	LOAD_FAST(arg=5, lineno=11)
         102	LOAD_FAST(arg=6, lineno=11)
         104	BUILD_TUPLE(arg=2, lineno=11)
         106	STORE_SUBSCR(arg=None, lineno=11)
         108	LOAD_CONST(arg=0, lineno=11)
         110	RETURN_VALUE(arg=None, lineno=11)
2023-05-29 21:55:55,687   run - DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-05-29 21:55:55,688   run - DEBUG:stack: []
2023-05-29 21:55:55,688   dispatch - DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=5)
2023-05-29 21:55:55,688   dispatch - DEBUG:stack []
2023-05-29 21:55:55,688   dispatch - DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=5)
2023-05-29 21:55:55,688   dispatch - DEBUG:stack []
2023-05-29 21:55:55,688   dispatch - DEBUG:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=5)
2023-05-29 21:55:55,688   dispatch - DEBUG:stack ['$2load_global.0']
2023-05-29 21:55:55,688   dispatch - DEBUG:dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=5)
2023-05-29 21:55:55,688   dispatch - DEBUG:stack ['$4load_method.1']
2023-05-29 21:55:55,688   dispatch - DEBUG:dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=5)
2023-05-29 21:55:55,688   dispatch - DEBUG:stack ['$4load_method.1', '$const6.2']
2023-05-29 21:55:55,688   dispatch - DEBUG:dispatch pc=10, inst=UNPACK_SEQUENCE(arg=2, lineno=5)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack ['$8call_method.3']
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=12, inst=STORE_FAST(arg=5, lineno=5)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack ['$10unpack_sequence.5', '$10unpack_sequence.4']
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=14, inst=STORE_FAST(arg=6, lineno=5)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack ['$10unpack_sequence.5']
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=16, inst=LOAD_FAST(arg=5, lineno=6)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack []
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=6)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack ['$i16.7']
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=20, inst=COMPARE_OP(arg=5, lineno=6)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack ['$i16.7', '$n18.8']
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=22, inst=POP_JUMP_IF_TRUE(arg=32, lineno=6)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack ['$20compare_op.9']
2023-05-29 21:55:55,689   run - DEBUG:end state. edges=[Edge(pc=24, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,689   run - DEBUG:pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-05-29 21:55:55,689   run - DEBUG:stack: []
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=24, inst=LOAD_FAST(arg=6, lineno=6)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack []
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=6)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack ['$j24.0']
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=6)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack ['$j24.0', '$n26.1']
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=6)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack ['$28compare_op.2']
2023-05-29 21:55:55,689   run - DEBUG:end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,689   run - DEBUG:pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-05-29 21:55:55,689   run - DEBUG:stack: []
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=32, inst=LOAD_CONST(arg=0, lineno=7)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack []
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=7)
2023-05-29 21:55:55,689   dispatch - DEBUG:stack ['$const32.0']
2023-05-29 21:55:55,689   run - DEBUG:end state. edges=[]
2023-05-29 21:55:55,689   run - DEBUG:pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-05-29 21:55:55,689   run - DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0)])
2023-05-29 21:55:55,689   run - DEBUG:stack: []
2023-05-29 21:55:55,689   dispatch - DEBUG:dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=8)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack []
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=38, inst=STORE_FAST(arg=7, lineno=8)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack ['$const36.0']
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=40, inst=LOAD_GLOBAL(arg=2, lineno=9)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack []
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=9)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack ['$40load_global.1']
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=44, inst=CALL_FUNCTION(arg=1, lineno=9)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack ['$40load_global.1', '$m42.2']
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=46, inst=GET_ITER(arg=None, lineno=9)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack ['$44call_function.3']
2023-05-29 21:55:55,690   run - DEBUG:end state. edges=[Edge(pc=48, stack=('$46get_iter.4',), blockstack=(), npush=0)]
2023-05-29 21:55:55,690   run - DEBUG:pending: deque([State(pc_initial=48 nstack_initial=1)])
2023-05-29 21:55:55,690   run - DEBUG:stack: ['$phi48.0']
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=48, inst=FOR_ITER(arg=40, lineno=9)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack ['$phi48.0']
2023-05-29 21:55:55,690   run - DEBUG:end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=('$phi48.0', '$48for_iter.2'), blockstack=(), npush=0)]
2023-05-29 21:55:55,690   run - DEBUG:pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=50 nstack_initial=2)])
2023-05-29 21:55:55,690   run - DEBUG:stack: []
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=90, inst=LOAD_GLOBAL(arg=3, lineno=11)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack []
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=92, inst=LOAD_METHOD(arg=4, lineno=11)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack ['$90load_global.0']
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=94, inst=LOAD_FAST(arg=7, lineno=11)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack ['$92load_method.1']
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=11)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack ['$92load_method.1', '$s94.2']
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=11)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack ['$96call_method.3']
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=11)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack ['$96call_method.3', '$K98.4']
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=102, inst=LOAD_FAST(arg=6, lineno=11)
2023-05-29 21:55:55,690   dispatch - DEBUG:stack ['$96call_method.3', '$K98.4', '$i100.5']
2023-05-29 21:55:55,690   dispatch - DEBUG:dispatch pc=104, inst=BUILD_TUPLE(arg=2, lineno=11)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$96call_method.3', '$K98.4', '$i100.5', '$j102.6']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=106, inst=STORE_SUBSCR(arg=None, lineno=11)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$96call_method.3', '$K98.4', '$104build_tuple.7']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=108, inst=LOAD_CONST(arg=0, lineno=11)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack []
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=110, inst=RETURN_VALUE(arg=None, lineno=11)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$const108.8']
2023-05-29 21:55:55,691   run - DEBUG:end state. edges=[]
2023-05-29 21:55:55,691   run - DEBUG:pending: deque([State(pc_initial=50 nstack_initial=2)])
2023-05-29 21:55:55,691   run - DEBUG:stack: ['$phi50.0', '$phi50.1']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=50, inst=STORE_FAST(arg=8, lineno=9)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$phi50.1']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$s52.2']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=56, inst=LOAD_FAST(arg=0, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$X56.4']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=60, inst=LOAD_FAST(arg=8, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$X56.4', '$i58.5']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=62, inst=BUILD_TUPLE(arg=2, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$X56.4', '$i58.5', '$v60.6']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$X56.4', '$62build_tuple.7']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$64binary_subscr.8']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$64binary_subscr.8', '$X66.9']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=8, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$64binary_subscr.8', '$X66.9', '$j68.10']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=72, inst=BUILD_TUPLE(arg=2, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$64binary_subscr.8', '$X66.9', '$j68.10', '$v70.11']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=74, inst=BINARY_SUBSCR(arg=None, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$64binary_subscr.8', '$X66.9', '$72build_tuple.12']
2023-05-29 21:55:55,691   dispatch - DEBUG:dispatch pc=76, inst=BINARY_SUBTRACT(arg=None, lineno=10)
2023-05-29 21:55:55,691   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$64binary_subscr.8', '$74binary_subscr.13']
2023-05-29 21:55:55,692   dispatch - DEBUG:dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=10)
2023-05-29 21:55:55,692   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$76binary_subtract.14']
2023-05-29 21:55:55,692   dispatch - DEBUG:dispatch pc=80, inst=BINARY_POWER(arg=None, lineno=10)
2023-05-29 21:55:55,692   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$76binary_subtract.14', '$const78.15']
2023-05-29 21:55:55,692   dispatch - DEBUG:dispatch pc=82, inst=BINARY_MULTIPLY(arg=None, lineno=10)
2023-05-29 21:55:55,692   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$gamma54.3', '$80binary_power.16']
2023-05-29 21:55:55,692   dispatch - DEBUG:dispatch pc=84, inst=INPLACE_SUBTRACT(arg=None, lineno=10)
2023-05-29 21:55:55,692   dispatch - DEBUG:stack ['$phi50.0', '$s52.2', '$82binary_multiply.17']
2023-05-29 21:55:55,692   dispatch - DEBUG:dispatch pc=86, inst=STORE_FAST(arg=7, lineno=10)
2023-05-29 21:55:55,692   dispatch - DEBUG:stack ['$phi50.0', '$84inplace_subtract.18']
2023-05-29 21:55:55,692   dispatch - DEBUG:dispatch pc=88, inst=JUMP_ABSOLUTE(arg=48, lineno=10)
2023-05-29 21:55:55,692   dispatch - DEBUG:stack ['$phi50.0']
2023-05-29 21:55:55,692   run - DEBUG:end state. edges=[Edge(pc=48, stack=('$phi50.0',), blockstack=(), npush=0)]
2023-05-29 21:55:55,692   run - DEBUG:pending: deque([State(pc_initial=48 nstack_initial=1)])
2023-05-29 21:55:55,692   _prune_phis - DEBUG:-------------------------Prune PHIs-------------------------
2023-05-29 21:55:55,692   _prune_phis - DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=1): {'$phi48.0'},
             State(pc_initial=50 nstack_initial=2): {'$phi50.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2023-05-29 21:55:55,692   find_use_defs - DEBUG:defmap: {'$phi48.0': State(pc_initial=36 nstack_initial=0),
 '$phi50.1': State(pc_initial=48 nstack_initial=1)}
2023-05-29 21:55:55,692   find_use_defs - DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi48.0': {('$46get_iter.4',
                           State(pc_initial=36 nstack_initial=0)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=2))},
             '$phi50.0': {('$phi48.0', State(pc_initial=48 nstack_initial=1))},
             '$phi50.1': {('$48for_iter.2',
                           State(pc_initial=48 nstack_initial=1))}})
2023-05-29 21:55:55,692   propagate_phi_map - DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi48.0': {('$46get_iter.4',
                           State(pc_initial=36 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=1))},
             '$phi50.0': {('$46get_iter.4',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi50.1': {('$48for_iter.2',
                           State(pc_initial=48 nstack_initial=1))}})
2023-05-29 21:55:55,692   propagate_phi_map - DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi48.0': {('$46get_iter.4',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi50.0': {('$46get_iter.4',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi50.1': {('$48for_iter.2',
                           State(pc_initial=48 nstack_initial=1))}})
2023-05-29 21:55:55,692   propagate_phi_map - DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi48.0': {('$46get_iter.4',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi50.0': {('$46get_iter.4',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi50.1': {('$48for_iter.2',
                           State(pc_initial=48 nstack_initial=1))}})
2023-05-29 21:55:55,693   apply_changes - DEBUG:keep phismap: {'$phi48.0': {('$46get_iter.4', State(pc_initial=36 nstack_initial=0))},
 '$phi50.1': {('$48for_iter.2', State(pc_initial=48 nstack_initial=1))}}
2023-05-29 21:55:55,693   apply_changes - DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=36 nstack_initial=0): {'$phi48.0': '$46get_iter.4'},
             State(pc_initial=48 nstack_initial=1): {'$phi50.1': '$48for_iter.2'}})
2023-05-29 21:55:55,693   _prune_phis - DEBUG:----------------------DONE Prune PHIs-----------------------
2023-05-29 21:55:55,693   run - DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$const6.2'}), (8, {'func': '$4load_method.1', 'args': ['$const6.2'], 'res': '$8call_method.3'}), (10, {'iterable': '$8call_method.3', 'stores': ['$10unpack_sequence.4', '$10unpack_sequence.5'], 'tupleobj': '$10unpack_sequence.6'}), (12, {'value': '$10unpack_sequence.4'}), (14, {'value': '$10unpack_sequence.5'}), (16, {'res': '$i16.7'}), (18, {'res': '$n18.8'}), (20, {'lhs': '$i16.7', 'rhs': '$n18.8', 'res': '$20compare_op.9'}), (22, {'pred': '$20compare_op.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: (), 32: ()})
2023-05-29 21:55:55,693   run - DEBUG:block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$j24.0'}), (26, {'res': '$n26.1'}), (28, {'lhs': '$j24.0', 'rhs': '$n26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
2023-05-29 21:55:55,693   run - DEBUG:block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$const32.0'}), (34, {'retval': '$const32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-05-29 21:55:55,693   run - DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'}), (40, {'res': '$40load_global.1'}), (42, {'res': '$m42.2'}), (44, {'func': '$40load_global.1', 'args': ['$m42.2'], 'res': '$44call_function.3'}), (46, {'value': '$44call_function.3', 'res': '$46get_iter.4'})), outgoing_phis={'$phi48.0': '$46get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$46get_iter.4',)})
2023-05-29 21:55:55,693   run - DEBUG:block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {'iterator': '$phi48.0', 'pair': '$48for_iter.1', 'indval': '$48for_iter.2', 'pred': '$48for_iter.3'}),), outgoing_phis={'$phi50.1': '$48for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 50: ('$phi48.0', '$48for_iter.2')})
2023-05-29 21:55:55,693   run - DEBUG:block_infos State(pc_initial=50 nstack_initial=2):
AdaptBlockInfo(insts=((50, {'value': '$phi50.1'}), (52, {'res': '$s52.2'}), (54, {'res': '$gamma54.3'}), (56, {'res': '$X56.4'}), (58, {'res': '$i58.5'}), (60, {'res': '$v60.6'}), (62, {'items': ['$i58.5', '$v60.6'], 'res': '$62build_tuple.7'}), (64, {'index': '$62build_tuple.7', 'target': '$X56.4', 'res': '$64binary_subscr.8'}), (66, {'res': '$X66.9'}), (68, {'res': '$j68.10'}), (70, {'res': '$v70.11'}), (72, {'items': ['$j68.10', '$v70.11'], 'res': '$72build_tuple.12'}), (74, {'index': '$72build_tuple.12', 'target': '$X66.9', 'res': '$74binary_subscr.13'}), (76, {'lhs': '$64binary_subscr.8', 'rhs': '$74binary_subscr.13', 'res': '$76binary_subtract.14'}), (78, {'res': '$const78.15'}), (80, {'lhs': '$76binary_subtract.14', 'rhs': '$const78.15', 'res': '$80binary_power.16'}), (82, {'lhs': '$gamma54.3', 'rhs': '$80binary_power.16', 'res': '$82binary_multiply.17'}), (84, {'lhs': '$s52.2', 'rhs': '$82binary_multiply.17', 'res': '$84inplace_subtract.18'}), (86, {'value': '$84inplace_subtract.18'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$phi50.0',)})
2023-05-29 21:55:55,693   run - DEBUG:block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$90load_global.0'}), (92, {'item': '$90load_global.0', 'res': '$92load_method.1'}), (94, {'res': '$s94.2'}), (96, {'func': '$92load_method.1', 'args': ['$s94.2'], 'res': '$96call_method.3'}), (98, {'res': '$K98.4'}), (100, {'res': '$i100.5'}), (102, {'res': '$j102.6'}), (104, {'items': ['$i100.5', '$j102.6'], 'res': '$104build_tuple.7'}), (106, {'target': '$K98.4', 'index': '$104build_tuple.7', 'value': '$96call_method.3'}), (108, {'res': '$const108.8'}), (110, {'retval': '$const108.8', 'castval': '$110return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-05-29 21:55:55,694   interpret - DEBUG:label 0:
    X = arg(0, name=X)                       ['X']
    gamma = arg(1, name=gamma)               ['gamma']
    n = arg(2, name=n)                       ['n']
    m = arg(3, name=m)                       ['m']
    K = arg(4, name=K)                       ['K']
    $2load_global.0 = global(cuda: <module 'numba.cuda' from 'C:\\ProgramData\\Anaconda3\\envs\\cuda_program\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=grid) ['$2load_global.0', '$4load_method.1']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8call_method.3 = call $4load_method.1($const6.2, func=$4load_method.1, args=[Var($const6.2, 1559313565.py:5)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', '$const6.2']
    $10unpack_sequence.6 = exhaust_iter(value=$8call_method.3, count=2) ['$10unpack_sequence.6', '$8call_method.3']
    $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None, fn=<built-in function getitem>) ['$10unpack_sequence.4', '$10unpack_sequence.6']
    $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None, fn=<built-in function getitem>) ['$10unpack_sequence.5', '$10unpack_sequence.6']
    i = $10unpack_sequence.4                 ['$10unpack_sequence.4', 'i']
    j = $10unpack_sequence.5                 ['$10unpack_sequence.5', 'j']
    $20compare_op.9 = i >= n                 ['$20compare_op.9', 'i', 'n']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.9, func=bool22, args=(Var($20compare_op.9, 1559313565.py:6),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.9', '$22pred', 'bool22']
    branch $22pred, 32, 24                   ['$22pred']
label 24:
    $28compare_op.2 = j >= n                 ['$28compare_op.2', 'j', 'n']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, 1559313565.py:6),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $const32.0 = const(NoneType, None)       ['$const32.0']
    $34return_value.1 = cast(value=$const32.0) ['$34return_value.1', '$const32.0']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    s = const(float, 0.0)                    ['s']
    $40load_global.1 = global(range: <class 'range'>) ['$40load_global.1']
    $44call_function.3 = call $40load_global.1(m, func=$40load_global.1, args=[Var(m, 1559313565.py:5)], kws=(), vararg=None, varkwarg=None, target=None) ['$40load_global.1', '$44call_function.3', 'm']
    $46get_iter.4 = getiter(value=$44call_function.3) ['$44call_function.3', '$46get_iter.4']
    $phi48.0 = $46get_iter.4                 ['$46get_iter.4', '$phi48.0']
    jump 48                                  []
label 48:
    $48for_iter.1 = iternext(value=$phi48.0) ['$48for_iter.1', '$phi48.0']
    $48for_iter.2 = pair_first(value=$48for_iter.1) ['$48for_iter.1', '$48for_iter.2']
    $48for_iter.3 = pair_second(value=$48for_iter.1) ['$48for_iter.1', '$48for_iter.3']
    $phi50.1 = $48for_iter.2                 ['$48for_iter.2', '$phi50.1']
    branch $48for_iter.3, 50, 90             ['$48for_iter.3']
label 50:
    v = $phi50.1                             ['$phi50.1', 'v']
    $62build_tuple.7 = build_tuple(items=[Var(i, 1559313565.py:5), Var(v, 1559313565.py:9)]) ['$62build_tuple.7', 'i', 'v']
    $64binary_subscr.8 = getitem(value=X, index=$62build_tuple.7, fn=<built-in function getitem>) ['$62build_tuple.7', '$64binary_subscr.8', 'X']
    $72build_tuple.12 = build_tuple(items=[Var(j, 1559313565.py:5), Var(v, 1559313565.py:9)]) ['$72build_tuple.12', 'j', 'v']
    $74binary_subscr.13 = getitem(value=X, index=$72build_tuple.12, fn=<built-in function getitem>) ['$72build_tuple.12', '$74binary_subscr.13', 'X']
    $76binary_subtract.14 = $64binary_subscr.8 - $74binary_subscr.13 ['$64binary_subscr.8', '$74binary_subscr.13', '$76binary_subtract.14']
    $const78.15 = const(int, 2)              ['$const78.15']
    $80binary_power.16 = $76binary_subtract.14 ** $const78.15 ['$76binary_subtract.14', '$80binary_power.16', '$const78.15']
    $82binary_multiply.17 = gamma * $80binary_power.16 ['$80binary_power.16', '$82binary_multiply.17', 'gamma']
    $84inplace_subtract.18 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=s, rhs=$82binary_multiply.17, static_lhs=Undefined, static_rhs=Undefined) ['$82binary_multiply.17', '$84inplace_subtract.18', 's']
    s = $84inplace_subtract.18               ['$84inplace_subtract.18', 's']
    jump 48                                  []
label 90:
    $90load_global.0 = global(math: <module 'math' (built-in)>) ['$90load_global.0']
    $92load_method.1 = getattr(value=$90load_global.0, attr=exp) ['$90load_global.0', '$92load_method.1']
    $96call_method.3 = call $92load_method.1(s, func=$92load_method.1, args=[Var(s, 1559313565.py:8)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.1', '$96call_method.3', 's']
    $104build_tuple.7 = build_tuple(items=[Var(i, 1559313565.py:5), Var(j, 1559313565.py:5)]) ['$104build_tuple.7', 'i', 'j']
    K[$104build_tuple.7] = $96call_method.3  ['$104build_tuple.7', '$96call_method.3', 'K']
    $const108.8 = const(NoneType, None)      ['$const108.8']
    $110return_value.9 = cast(value=$const108.8) ['$110return_value.9', '$const108.8']
    return $110return_value.9                ['$110return_value.9']

2023-05-29 21:55:55,707   _run_block_analysis - DEBUG:==== SSA block analysis pass on 0
2023-05-29 21:55:55,707   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACDFA3B20>
2023-05-29 21:55:55,707   _run_ssa_block_pass - DEBUG:on stmt: X = arg(0, name=X)
2023-05-29 21:55:55,707   _run_ssa_block_pass - DEBUG:on stmt: gamma = arg(1, name=gamma)
2023-05-29 21:55:55,707   _run_ssa_block_pass - DEBUG:on stmt: n = arg(2, name=n)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: m = arg(3, name=m)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: K = arg(4, name=K)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $2load_global.0 = global(cuda: <module 'numba.cuda' from 'C:\\ProgramData\\Anaconda3\\envs\\cuda_program\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=grid)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $const6.2 = const(int, 2)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $8call_method.3 = call $4load_method.1($const6.2, func=$4load_method.1, args=[Var($const6.2, 1559313565.py:5)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $10unpack_sequence.6 = exhaust_iter(value=$8call_method.3, count=2)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None, fn=<built-in function getitem>)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None, fn=<built-in function getitem>)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: i = $10unpack_sequence.4
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: j = $10unpack_sequence.5
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $20compare_op.9 = i >= n
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: bool22 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $22pred = call bool22($20compare_op.9, func=bool22, args=(Var($20compare_op.9, 1559313565.py:6),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: branch $22pred, 32, 24
2023-05-29 21:55:55,708   _run_block_analysis - DEBUG:==== SSA block analysis pass on 24
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACDFA3B20>
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $28compare_op.2 = j >= n
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: bool30 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, 1559313565.py:6),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: branch $30pred, 32, 36
2023-05-29 21:55:55,708   _run_block_analysis - DEBUG:==== SSA block analysis pass on 32
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACDFA3B20>
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $const32.0 = const(NoneType, None)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $34return_value.1 = cast(value=$const32.0)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: return $34return_value.1
2023-05-29 21:55:55,708   _run_block_analysis - DEBUG:==== SSA block analysis pass on 36
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACDFA3B20>
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: s = const(float, 0.0)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $40load_global.1 = global(range: <class 'range'>)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $44call_function.3 = call $40load_global.1(m, func=$40load_global.1, args=[Var(m, 1559313565.py:5)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $46get_iter.4 = getiter(value=$44call_function.3)
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: $phi48.0 = $46get_iter.4
2023-05-29 21:55:55,708   _run_ssa_block_pass - DEBUG:on stmt: jump 48
2023-05-29 21:55:55,709   _run_block_analysis - DEBUG:==== SSA block analysis pass on 48
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACDFA3B20>
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $48for_iter.1 = iternext(value=$phi48.0)
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $48for_iter.2 = pair_first(value=$48for_iter.1)
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $48for_iter.3 = pair_second(value=$48for_iter.1)
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $phi50.1 = $48for_iter.2
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: branch $48for_iter.3, 50, 90
2023-05-29 21:55:55,709   _run_block_analysis - DEBUG:==== SSA block analysis pass on 50
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACDFA3B20>
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: v = $phi50.1
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $62build_tuple.7 = build_tuple(items=[Var(i, 1559313565.py:5), Var(v, 1559313565.py:9)])
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $64binary_subscr.8 = getitem(value=X, index=$62build_tuple.7, fn=<built-in function getitem>)
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $72build_tuple.12 = build_tuple(items=[Var(j, 1559313565.py:5), Var(v, 1559313565.py:9)])
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $74binary_subscr.13 = getitem(value=X, index=$72build_tuple.12, fn=<built-in function getitem>)
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $76binary_subtract.14 = $64binary_subscr.8 - $74binary_subscr.13
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $const78.15 = const(int, 2)
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $80binary_power.16 = $76binary_subtract.14 ** $const78.15
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $82binary_multiply.17 = gamma * $80binary_power.16
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $84inplace_subtract.18 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=s, rhs=$82binary_multiply.17, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: s = $84inplace_subtract.18
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: jump 48
2023-05-29 21:55:55,709   _run_block_analysis - DEBUG:==== SSA block analysis pass on 90
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACDFA3B20>
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $90load_global.0 = global(math: <module 'math' (built-in)>)
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $92load_method.1 = getattr(value=$90load_global.0, attr=exp)
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $96call_method.3 = call $92load_method.1(s, func=$92load_method.1, args=[Var(s, 1559313565.py:8)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $104build_tuple.7 = build_tuple(items=[Var(i, 1559313565.py:5), Var(j, 1559313565.py:5)])
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: K[$104build_tuple.7] = $96call_method.3
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $const108.8 = const(NoneType, None)
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: $110return_value.9 = cast(value=$const108.8)
2023-05-29 21:55:55,709   _run_ssa_block_pass - DEBUG:on stmt: return $110return_value.9
2023-05-29 21:55:55,710   _find_defs_violators - DEBUG:defs defaultdict(<class 'list'>,
            {'$104build_tuple.7': [<numba.core.ir.Assign object at 0x0000018ACDF78580>],
             '$10unpack_sequence.4': [<numba.core.ir.Assign object at 0x0000018ACDF43F10>],
             '$10unpack_sequence.5': [<numba.core.ir.Assign object at 0x0000018ACDF6C070>],
             '$10unpack_sequence.6': [<numba.core.ir.Assign object at 0x0000018ACDF43DC0>],
             '$110return_value.9': [<numba.core.ir.Assign object at 0x0000018ACDF78910>],
             '$20compare_op.9': [<numba.core.ir.Assign object at 0x0000018ACDF6C640>],
             '$22pred': [<numba.core.ir.Assign object at 0x0000018ACDF6C8B0>],
             '$28compare_op.2': [<numba.core.ir.Assign object at 0x0000018ACDF6CD00>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000018ACDF43190>],
             '$30pred': [<numba.core.ir.Assign object at 0x0000018ACDF6CF70>],
             '$34return_value.1': [<numba.core.ir.Assign object at 0x0000018ACDF70310>],
             '$40load_global.1': [<numba.core.ir.Assign object at 0x0000018ACDF70850>],
             '$44call_function.3': [<numba.core.ir.Assign object at 0x0000018ACDF70B50>],
             '$46get_iter.4': [<numba.core.ir.Assign object at 0x0000018ACDF70C70>],
             '$48for_iter.1': [<numba.core.ir.Assign object at 0x0000018ACDF70F40>],
             '$48for_iter.2': [<numba.core.ir.Assign object at 0x0000018ACDF730A0>],
             '$48for_iter.3': [<numba.core.ir.Assign object at 0x0000018ACDF731C0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000018ACDF43910>],
             '$62build_tuple.7': [<numba.core.ir.Assign object at 0x0000018ACDF73BE0>],
             '$64binary_subscr.8': [<numba.core.ir.Assign object at 0x0000018ACDF73D60>],
             '$72build_tuple.12': [<numba.core.ir.Assign object at 0x0000018ACDF75280>],
             '$74binary_subscr.13': [<numba.core.ir.Assign object at 0x0000018ACDF75400>],
             '$76binary_subtract.14': [<numba.core.ir.Assign object at 0x0000018ACDF75580>],
             '$80binary_power.16': [<numba.core.ir.Assign object at 0x0000018ACDF75880>],
             '$82binary_multiply.17': [<numba.core.ir.Assign object at 0x0000018ACDF75A00>],
             '$84inplace_subtract.18': [<numba.core.ir.Assign object at 0x0000018ACDF75B80>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x0000018ACDF43CA0>],
             '$90load_global.0': [<numba.core.ir.Assign object at 0x0000018ACDF73E50>],
             '$92load_method.1': [<numba.core.ir.Assign object at 0x0000018ACDF75D90>],
             '$96call_method.3': [<numba.core.ir.Assign object at 0x0000018ACDF78100>],
             '$const108.8': [<numba.core.ir.Assign object at 0x0000018ACDF78790>],
             '$const32.0': [<numba.core.ir.Assign object at 0x0000018ACDF70190>],
             '$const6.2': [<numba.core.ir.Assign object at 0x0000018ACDF43A90>],
             '$const78.15': [<numba.core.ir.Assign object at 0x0000018ACDF756D0>],
             '$phi48.0': [<numba.core.ir.Assign object at 0x0000018ACDF706D0>],
             '$phi50.1': [<numba.core.ir.Assign object at 0x0000018ACDF70E80>],
             'K': [<numba.core.ir.Assign object at 0x0000018ACDF43490>],
             'X': [<numba.core.ir.Assign object at 0x0000018ACDF3CD60>],
             'bool22': [<numba.core.ir.Assign object at 0x0000018ACDF6C790>],
             'bool30': [<numba.core.ir.Assign object at 0x0000018ACDF6CE50>],
             'gamma': [<numba.core.ir.Assign object at 0x0000018ACDF3CB50>],
             'i': [<numba.core.ir.Assign object at 0x0000018ACDF6C130>],
             'j': [<numba.core.ir.Assign object at 0x0000018ACDF6C250>],
             'm': [<numba.core.ir.Assign object at 0x0000018ACDF436D0>],
             'n': [<numba.core.ir.Assign object at 0x0000018ACDF3CAF0>],
             's': [<numba.core.ir.Assign object at 0x0000018ACDF705B0>,
                   <numba.core.ir.Assign object at 0x0000018ACDF75C40>],
             'v': [<numba.core.ir.Assign object at 0x0000018ACDF73490>]})
2023-05-29 21:55:55,710   _find_defs_violators - DEBUG:SSA violators {'s'}
2023-05-29 21:55:55,710   _run_ssa - DEBUG:Fix SSA violator on var s
2023-05-29 21:55:55,710   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 0
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: X = arg(0, name=X)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: gamma = arg(1, name=gamma)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: n = arg(2, name=n)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: m = arg(3, name=m)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: K = arg(4, name=K)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: $2load_global.0 = global(cuda: <module 'numba.cuda' from 'C:\\ProgramData\\Anaconda3\\envs\\cuda_program\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=grid)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: $const6.2 = const(int, 2)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: $8call_method.3 = call $4load_method.1($const6.2, func=$4load_method.1, args=[Var($const6.2, 1559313565.py:5)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: $10unpack_sequence.6 = exhaust_iter(value=$8call_method.3, count=2)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None, fn=<built-in function getitem>)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None, fn=<built-in function getitem>)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: i = $10unpack_sequence.4
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: j = $10unpack_sequence.5
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: $20compare_op.9 = i >= n
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: bool22 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: $22pred = call bool22($20compare_op.9, func=bool22, args=(Var($20compare_op.9, 1559313565.py:6),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:on stmt: branch $22pred, 32, 24
2023-05-29 21:55:55,710   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 24
2023-05-29 21:55:55,710   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $28compare_op.2 = j >= n
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: bool30 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, 1559313565.py:6),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: branch $30pred, 32, 36
2023-05-29 21:55:55,711   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 32
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $const32.0 = const(NoneType, None)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $34return_value.1 = cast(value=$const32.0)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: return $34return_value.1
2023-05-29 21:55:55,711   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 36
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: s = const(float, 0.0)
2023-05-29 21:55:55,711   on_assign - DEBUG:first assign: s
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:replaced with: s = const(float, 0.0)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $40load_global.1 = global(range: <class 'range'>)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $44call_function.3 = call $40load_global.1(m, func=$40load_global.1, args=[Var(m, 1559313565.py:5)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $46get_iter.4 = getiter(value=$44call_function.3)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $phi48.0 = $46get_iter.4
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: jump 48
2023-05-29 21:55:55,711   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 48
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $48for_iter.1 = iternext(value=$phi48.0)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $48for_iter.2 = pair_first(value=$48for_iter.1)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $48for_iter.3 = pair_second(value=$48for_iter.1)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $phi50.1 = $48for_iter.2
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: branch $48for_iter.3, 50, 90
2023-05-29 21:55:55,711   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 50
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: v = $phi50.1
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $62build_tuple.7 = build_tuple(items=[Var(i, 1559313565.py:5), Var(v, 1559313565.py:9)])
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $64binary_subscr.8 = getitem(value=X, index=$62build_tuple.7, fn=<built-in function getitem>)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $72build_tuple.12 = build_tuple(items=[Var(j, 1559313565.py:5), Var(v, 1559313565.py:9)])
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $74binary_subscr.13 = getitem(value=X, index=$72build_tuple.12, fn=<built-in function getitem>)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $76binary_subtract.14 = $64binary_subscr.8 - $74binary_subscr.13
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $const78.15 = const(int, 2)
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $80binary_power.16 = $76binary_subtract.14 ** $const78.15
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $82binary_multiply.17 = gamma * $80binary_power.16
2023-05-29 21:55:55,711   _run_ssa_block_pass - DEBUG:on stmt: $84inplace_subtract.18 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=s, rhs=$82binary_multiply.17, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: s = $84inplace_subtract.18
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:replaced with: s.1 = $84inplace_subtract.18
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: jump 48
2023-05-29 21:55:55,712   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 90
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $90load_global.0 = global(math: <module 'math' (built-in)>)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $92load_method.1 = getattr(value=$90load_global.0, attr=exp)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $96call_method.3 = call $92load_method.1(s, func=$92load_method.1, args=[Var(s, 1559313565.py:8)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $104build_tuple.7 = build_tuple(items=[Var(i, 1559313565.py:5), Var(j, 1559313565.py:5)])
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: K[$104build_tuple.7] = $96call_method.3
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $const108.8 = const(NoneType, None)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $110return_value.9 = cast(value=$const108.8)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: return $110return_value.9
2023-05-29 21:55:55,712   _run_ssa - DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {36: [<numba.core.ir.Assign object at 0x0000018ACDFA0FD0>],
             50: [<numba.core.ir.Assign object at 0x0000018ACDFA0AC0>]})
2023-05-29 21:55:55,712   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 0
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: X = arg(0, name=X)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: gamma = arg(1, name=gamma)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: n = arg(2, name=n)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: m = arg(3, name=m)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: K = arg(4, name=K)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $2load_global.0 = global(cuda: <module 'numba.cuda' from 'C:\\ProgramData\\Anaconda3\\envs\\cuda_program\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=grid)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $const6.2 = const(int, 2)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $8call_method.3 = call $4load_method.1($const6.2, func=$4load_method.1, args=[Var($const6.2, 1559313565.py:5)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $10unpack_sequence.6 = exhaust_iter(value=$8call_method.3, count=2)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None, fn=<built-in function getitem>)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None, fn=<built-in function getitem>)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: i = $10unpack_sequence.4
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: j = $10unpack_sequence.5
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $20compare_op.9 = i >= n
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: bool22 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,712   _run_ssa_block_pass - DEBUG:on stmt: $22pred = call bool22($20compare_op.9, func=bool22, args=(Var($20compare_op.9, 1559313565.py:6),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: branch $22pred, 32, 24
2023-05-29 21:55:55,713   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 24
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $28compare_op.2 = j >= n
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: bool30 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, 1559313565.py:6),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: branch $30pred, 32, 36
2023-05-29 21:55:55,713   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 32
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $const32.0 = const(NoneType, None)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $34return_value.1 = cast(value=$const32.0)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: return $34return_value.1
2023-05-29 21:55:55,713   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 36
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: s = const(float, 0.0)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $40load_global.1 = global(range: <class 'range'>)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $44call_function.3 = call $40load_global.1(m, func=$40load_global.1, args=[Var(m, 1559313565.py:5)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $46get_iter.4 = getiter(value=$44call_function.3)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $phi48.0 = $46get_iter.4
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: jump 48
2023-05-29 21:55:55,713   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 48
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $48for_iter.1 = iternext(value=$phi48.0)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $48for_iter.2 = pair_first(value=$48for_iter.1)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $48for_iter.3 = pair_second(value=$48for_iter.1)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $phi50.1 = $48for_iter.2
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: branch $48for_iter.3, 50, 90
2023-05-29 21:55:55,713   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 50
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: v = $phi50.1
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $62build_tuple.7 = build_tuple(items=[Var(i, 1559313565.py:5), Var(v, 1559313565.py:9)])
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $64binary_subscr.8 = getitem(value=X, index=$62build_tuple.7, fn=<built-in function getitem>)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $72build_tuple.12 = build_tuple(items=[Var(j, 1559313565.py:5), Var(v, 1559313565.py:9)])
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $74binary_subscr.13 = getitem(value=X, index=$72build_tuple.12, fn=<built-in function getitem>)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $76binary_subtract.14 = $64binary_subscr.8 - $74binary_subscr.13
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $const78.15 = const(int, 2)
2023-05-29 21:55:55,713   _run_ssa_block_pass - DEBUG:on stmt: $80binary_power.16 = $76binary_subtract.14 ** $const78.15
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:on stmt: $82binary_multiply.17 = gamma * $80binary_power.16
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:on stmt: $84inplace_subtract.18 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=s, rhs=$82binary_multiply.17, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,714   _find_def - DEBUG:find_def var='s' stmt=$84inplace_subtract.18 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=s, rhs=$82binary_multiply.17, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,714   _find_def_from_top - DEBUG:find_def_from_top label 50
2023-05-29 21:55:55,714   _find_def_from_top - DEBUG:idom 48 from label 50
2023-05-29 21:55:55,714   _find_def_from_bottom - DEBUG:find_def_from_bottom label 48
2023-05-29 21:55:55,714   _find_def_from_top - DEBUG:find_def_from_top label 48
2023-05-29 21:55:55,714   _find_def_from_top - DEBUG:insert phi node s.2 = phi(incoming_values=[], incoming_blocks=[]) at 48
2023-05-29 21:55:55,714   _find_def_from_bottom - DEBUG:find_def_from_bottom label 50
2023-05-29 21:55:55,714   _find_def_from_top - DEBUG:incoming_def s.1 = $84inplace_subtract.18
2023-05-29 21:55:55,714   _find_def_from_bottom - DEBUG:find_def_from_bottom label 36
2023-05-29 21:55:55,714   _find_def_from_top - DEBUG:incoming_def s = const(float, 0.0)
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:replaced with: $84inplace_subtract.18 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=s.2, rhs=$82binary_multiply.17, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:on stmt: s.1 = $84inplace_subtract.18
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:on stmt: jump 48
2023-05-29 21:55:55,714   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 90
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACDF3C2B0>
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:on stmt: $90load_global.0 = global(math: <module 'math' (built-in)>)
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:on stmt: $92load_method.1 = getattr(value=$90load_global.0, attr=exp)
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:on stmt: $96call_method.3 = call $92load_method.1(s, func=$92load_method.1, args=[Var(s, 1559313565.py:8)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,714   _find_def - DEBUG:find_def var='s' stmt=$96call_method.3 = call $92load_method.1(s, func=$92load_method.1, args=[Var(s, 1559313565.py:8)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,714   _find_def_from_top - DEBUG:find_def_from_top label 90
2023-05-29 21:55:55,714   _find_def_from_top - DEBUG:idom 48 from label 90
2023-05-29 21:55:55,714   _find_def_from_bottom - DEBUG:find_def_from_bottom label 48
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:replaced with: $96call_method.3 = call $92load_method.1(s.2, func=$92load_method.1, args=[Var(s.2, 1559313565.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:on stmt: $104build_tuple.7 = build_tuple(items=[Var(i, 1559313565.py:5), Var(j, 1559313565.py:5)])
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:on stmt: K[$104build_tuple.7] = $96call_method.3
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:on stmt: $const108.8 = const(NoneType, None)
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:on stmt: $110return_value.9 = cast(value=$const108.8)
2023-05-29 21:55:55,714   _run_ssa_block_pass - DEBUG:on stmt: return $110return_value.9
2023-05-29 21:55:55,784   __init__ - DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=216)
           2	LOAD_DEREF(arg=1, lineno=216)
           4	LOAD_CONST(arg=1, lineno=216)
           6	CALL_FUNCTION(arg=1, lineno=216)
           8	STORE_FAST(arg=2, lineno=216)
          10	LOAD_DEREF(arg=1, lineno=217)
          12	LOAD_FAST(arg=0, lineno=217)
          14	CALL_FUNCTION(arg=1, lineno=217)
          16	STORE_FAST(arg=0, lineno=217)
          18	LOAD_FAST(arg=1, lineno=218)
          20	LOAD_CONST(arg=2, lineno=218)
          22	COMPARE_OP(arg=0, lineno=218)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=218)
          26	LOAD_CONST(arg=3, lineno=219)
          28	STORE_FAST(arg=3, lineno=219)
          30	LOAD_FAST(arg=1, lineno=220)
          32	UNARY_NEGATIVE(arg=None, lineno=220)
          34	STORE_FAST(arg=4, lineno=220)
          36	LOAD_FAST(arg=4, lineno=221)
          38	LOAD_CONST(arg=2, lineno=221)
          40	COMPARE_OP(arg=0, lineno=221)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=221)
          44	LOAD_GLOBAL(arg=0, lineno=222)
          46	RAISE_VARARGS(arg=1, lineno=222)
>         48	LOAD_DEREF(arg=0, lineno=223)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=223)
          52	LOAD_FAST(arg=0, lineno=224)
          54	LOAD_CONST(arg=2, lineno=224)
          56	COMPARE_OP(arg=2, lineno=224)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=224)
          60	LOAD_DEREF(arg=2, lineno=225)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=225)
          64	LOAD_DEREF(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=1, lineno=228)
          70	LOAD_CONST(arg=4, lineno=228)
          72	CALL_FUNCTION(arg=1, lineno=228)
          74	RAISE_VARARGS(arg=1, lineno=228)
>         76	LOAD_FAST(arg=0, lineno=229)
          78	LOAD_CONST(arg=1, lineno=229)
          80	COMPARE_OP(arg=3, lineno=229)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          84	LOAD_FAST(arg=0, lineno=229)
          86	LOAD_CONST(arg=5, lineno=229)
          88	COMPARE_OP(arg=3, lineno=229)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          92	LOAD_CONST(arg=2, lineno=230)
          94	RETURN_VALUE(arg=None, lineno=230)
          96	JUMP_FORWARD(arg=8, lineno=230)
>         98	LOAD_CONST(arg=6, lineno=232)
         100	STORE_FAST(arg=3, lineno=232)
         102	LOAD_FAST(arg=1, lineno=233)
         104	STORE_FAST(arg=4, lineno=233)
>        106	LOAD_FAST(arg=4, lineno=234)
         108	LOAD_CONST(arg=7, lineno=234)
         110	COMPARE_OP(arg=4, lineno=234)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=234)
         114	LOAD_GLOBAL(arg=2, lineno=236)
         116	LOAD_METHOD(arg=3, lineno=236)
         118	LOAD_FAST(arg=0, lineno=236)
         120	LOAD_GLOBAL(arg=4, lineno=236)
         122	LOAD_FAST(arg=1, lineno=236)
         124	CALL_FUNCTION(arg=1, lineno=236)
         126	CALL_METHOD(arg=2, lineno=236)
         128	RETURN_VALUE(arg=None, lineno=236)
>        130	LOAD_FAST(arg=4, lineno=237)
         132	LOAD_CONST(arg=2, lineno=237)
         134	COMPARE_OP(arg=3, lineno=237)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=237)
         138	LOAD_FAST(arg=4, lineno=238)
         140	LOAD_CONST(arg=1, lineno=238)
         142	BINARY_AND(arg=None, lineno=238)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=238)
         146	LOAD_FAST(arg=2, lineno=239)
         148	LOAD_FAST(arg=0, lineno=239)
         150	INPLACE_MULTIPLY(arg=None, lineno=239)
         152	STORE_FAST(arg=2, lineno=239)
>        154	LOAD_FAST(arg=4, lineno=240)
         156	LOAD_CONST(arg=1, lineno=240)
         158	INPLACE_RSHIFT(arg=None, lineno=240)
         160	STORE_FAST(arg=4, lineno=240)
         162	LOAD_FAST(arg=0, lineno=241)
         164	LOAD_FAST(arg=0, lineno=241)
         166	INPLACE_MULTIPLY(arg=None, lineno=241)
         168	STORE_FAST(arg=0, lineno=241)
         170	JUMP_ABSOLUTE(arg=130, lineno=241)
>        172	LOAD_FAST(arg=3, lineno=243)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=243)
         176	LOAD_CONST(arg=8, lineno=243)
         178	LOAD_FAST(arg=2, lineno=243)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=243)
         182	RETURN_VALUE(arg=None, lineno=243)
>        184	LOAD_FAST(arg=2, lineno=243)
         186	RETURN_VALUE(arg=None, lineno=243)
2023-05-29 21:55:55,784   run - DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-05-29 21:55:55,784   run - DEBUG:stack: []
2023-05-29 21:55:55,784   dispatch - DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=216)
2023-05-29 21:55:55,784   dispatch - DEBUG:stack []
2023-05-29 21:55:55,784   dispatch - DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
2023-05-29 21:55:55,784   dispatch - DEBUG:stack []
2023-05-29 21:55:55,784   dispatch - DEBUG:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
2023-05-29 21:55:55,784   dispatch - DEBUG:stack ['$2load_deref.0']
2023-05-29 21:55:55,784   dispatch - DEBUG:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack ['$2load_deref.0', '$const4.1']
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack ['$6call_function.2']
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack []
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack ['$10load_deref.3']
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack ['$10load_deref.3', '$a12.4']
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack ['$14call_function.5']
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack []
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack ['$b18.6']
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack ['$b18.6', '$const20.7']
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=218)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack ['$22compare_op.8']
2023-05-29 21:55:55,785   run - DEBUG:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,785   run - DEBUG:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2023-05-29 21:55:55,785   run - DEBUG:stack: []
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack []
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack ['$const26.0']
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
2023-05-29 21:55:55,785   dispatch - DEBUG:stack []
2023-05-29 21:55:55,785   dispatch - DEBUG:dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack ['$b30.1']
2023-05-29 21:55:55,786   dispatch - DEBUG:dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack ['$32unary_negative.2']
2023-05-29 21:55:55,786   dispatch - DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack []
2023-05-29 21:55:55,786   dispatch - DEBUG:dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack ['$exp36.3']
2023-05-29 21:55:55,786   dispatch - DEBUG:dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack ['$exp36.3', '$const38.4']
2023-05-29 21:55:55,786   dispatch - DEBUG:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=221)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack ['$40compare_op.5']
2023-05-29 21:55:55,786   run - DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,786   run - DEBUG:pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
2023-05-29 21:55:55,786   run - DEBUG:stack: []
2023-05-29 21:55:55,786   dispatch - DEBUG:dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack []
2023-05-29 21:55:55,786   dispatch - DEBUG:dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack ['$const98.0']
2023-05-29 21:55:55,786   dispatch - DEBUG:dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack []
2023-05-29 21:55:55,786   dispatch - DEBUG:dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack ['$b102.1']
2023-05-29 21:55:55,786   run - DEBUG:end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,786   run - DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2023-05-29 21:55:55,786   run - DEBUG:stack: []
2023-05-29 21:55:55,786   dispatch - DEBUG:dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack []
2023-05-29 21:55:55,786   dispatch - DEBUG:dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack ['$44load_global.0']
2023-05-29 21:55:55,786   run - DEBUG:end state. edges=[]
2023-05-29 21:55:55,786   run - DEBUG:pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2023-05-29 21:55:55,786   run - DEBUG:stack: []
2023-05-29 21:55:55,786   dispatch - DEBUG:dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
2023-05-29 21:55:55,786   dispatch - DEBUG:stack []
2023-05-29 21:55:55,787   dispatch - DEBUG:dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=223)
2023-05-29 21:55:55,787   dispatch - DEBUG:stack ['$48load_deref.0']
2023-05-29 21:55:55,787   run - DEBUG:end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,787   run - DEBUG:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2023-05-29 21:55:55,787   run - DEBUG:stack: []
2023-05-29 21:55:55,787   dispatch - DEBUG:dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
2023-05-29 21:55:55,787   dispatch - DEBUG:stack []
2023-05-29 21:55:55,787   dispatch - DEBUG:dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
2023-05-29 21:55:55,787   dispatch - DEBUG:stack ['$exp106.0']
2023-05-29 21:55:55,787   dispatch - DEBUG:dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
2023-05-29 21:55:55,787   dispatch - DEBUG:stack ['$exp106.0', '$const108.1']
2023-05-29 21:55:55,787   dispatch - DEBUG:dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=234)
2023-05-29 21:55:55,787   dispatch - DEBUG:stack ['$110compare_op.2']
2023-05-29 21:55:55,787   run - DEBUG:end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,787   run - DEBUG:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2023-05-29 21:55:55,787   run - DEBUG:stack: []
2023-05-29 21:55:55,787   dispatch - DEBUG:dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
2023-05-29 21:55:55,787   dispatch - DEBUG:stack []
2023-05-29 21:55:55,787   dispatch - DEBUG:dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
2023-05-29 21:55:55,787   dispatch - DEBUG:stack ['$a52.0']
2023-05-29 21:55:55,787   dispatch - DEBUG:dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
2023-05-29 21:55:55,787   dispatch - DEBUG:stack ['$a52.0', '$const54.1']
2023-05-29 21:55:55,787   dispatch - DEBUG:dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=224)
2023-05-29 21:55:55,787   dispatch - DEBUG:stack ['$56compare_op.2']
2023-05-29 21:55:55,787   run - DEBUG:end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,787   run - DEBUG:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2023-05-29 21:55:55,787   run - DEBUG:pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2023-05-29 21:55:55,787   run - DEBUG:stack: []
2023-05-29 21:55:55,787   dispatch - DEBUG:dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
2023-05-29 21:55:55,787   dispatch - DEBUG:stack []
2023-05-29 21:55:55,787   dispatch - DEBUG:dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
2023-05-29 21:55:55,787   dispatch - DEBUG:stack ['$114load_global.0']
2023-05-29 21:55:55,788   dispatch - DEBUG:dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
2023-05-29 21:55:55,788   dispatch - DEBUG:stack ['$116load_method.1']
2023-05-29 21:55:55,788   dispatch - DEBUG:dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
2023-05-29 21:55:55,788   dispatch - DEBUG:stack ['$116load_method.1', '$a118.2']
2023-05-29 21:55:55,788   dispatch - DEBUG:dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
2023-05-29 21:55:55,788   dispatch - DEBUG:stack ['$116load_method.1', '$a118.2', '$120load_global.3']
2023-05-29 21:55:55,788   dispatch - DEBUG:dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
2023-05-29 21:55:55,788   dispatch - DEBUG:stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
2023-05-29 21:55:55,788   dispatch - DEBUG:dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
2023-05-29 21:55:55,788   dispatch - DEBUG:stack ['$116load_method.1', '$a118.2', '$124call_function.5']
2023-05-29 21:55:55,788   dispatch - DEBUG:dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
2023-05-29 21:55:55,788   dispatch - DEBUG:stack ['$126call_method.6']
2023-05-29 21:55:55,788   run - DEBUG:end state. edges=[]
2023-05-29 21:55:55,788   run - DEBUG:pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2023-05-29 21:55:55,788   run - DEBUG:stack: []
2023-05-29 21:55:55,788   dispatch - DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=237)
2023-05-29 21:55:55,788   dispatch - DEBUG:stack []
2023-05-29 21:55:55,788   dispatch - DEBUG:dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=237)
2023-05-29 21:55:55,788   dispatch - DEBUG:stack ['$exp130.0']
2023-05-29 21:55:55,788   dispatch - DEBUG:dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=237)
2023-05-29 21:55:55,788   dispatch - DEBUG:stack ['$exp130.0', '$const132.1']
2023-05-29 21:55:55,788   dispatch - DEBUG:dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=237)
2023-05-29 21:55:55,788   dispatch - DEBUG:stack ['$134compare_op.2']
2023-05-29 21:55:55,788   run - DEBUG:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,788   run - DEBUG:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
2023-05-29 21:55:55,788   run - DEBUG:stack: []
2023-05-29 21:55:55,788   dispatch - DEBUG:dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
2023-05-29 21:55:55,788   dispatch - DEBUG:stack []
2023-05-29 21:55:55,788   dispatch - DEBUG:dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=225)
2023-05-29 21:55:55,788   dispatch - DEBUG:stack ['$60load_deref.0']
2023-05-29 21:55:55,788   run - DEBUG:end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,788   run - DEBUG:pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2023-05-29 21:55:55,788   run - DEBUG:stack: []
2023-05-29 21:55:55,789   dispatch - DEBUG:dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
2023-05-29 21:55:55,789   dispatch - DEBUG:stack []
2023-05-29 21:55:55,789   dispatch - DEBUG:dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
2023-05-29 21:55:55,789   dispatch - DEBUG:stack ['$a76.0']
2023-05-29 21:55:55,789   dispatch - DEBUG:dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
2023-05-29 21:55:55,789   dispatch - DEBUG:stack ['$a76.0', '$const78.1']
2023-05-29 21:55:55,789   dispatch - DEBUG:dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
2023-05-29 21:55:55,789   dispatch - DEBUG:stack ['$80compare_op.2']
2023-05-29 21:55:55,789   run - DEBUG:end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,789   run - DEBUG:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2023-05-29 21:55:55,789   run - DEBUG:stack: []
2023-05-29 21:55:55,789   dispatch - DEBUG:dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=238)
2023-05-29 21:55:55,789   dispatch - DEBUG:stack []
2023-05-29 21:55:55,789   dispatch - DEBUG:dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=238)
2023-05-29 21:55:55,789   dispatch - DEBUG:stack ['$exp138.0']
2023-05-29 21:55:55,789   dispatch - DEBUG:dispatch pc=142, inst=BINARY_AND(arg=None, lineno=238)
2023-05-29 21:55:55,789   dispatch - DEBUG:stack ['$exp138.0', '$const140.1']
2023-05-29 21:55:55,789   dispatch - DEBUG:dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=238)
2023-05-29 21:55:55,789   dispatch - DEBUG:stack ['$142binary_and.2']
2023-05-29 21:55:55,789   run - DEBUG:end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,789   run - DEBUG:pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2023-05-29 21:55:55,789   run - DEBUG:stack: []
2023-05-29 21:55:55,789   dispatch - DEBUG:dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=243)
2023-05-29 21:55:55,789   dispatch - DEBUG:stack []
2023-05-29 21:55:55,789   dispatch - DEBUG:dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=243)
2023-05-29 21:55:55,789   dispatch - DEBUG:stack ['$invert172.0']
2023-05-29 21:55:55,789   run - DEBUG:end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,789   run - DEBUG:pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
2023-05-29 21:55:55,789   run - DEBUG:stack: []
2023-05-29 21:55:55,789   dispatch - DEBUG:dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
2023-05-29 21:55:55,789   dispatch - DEBUG:stack []
2023-05-29 21:55:55,789   dispatch - DEBUG:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
2023-05-29 21:55:55,789   dispatch - DEBUG:stack ['$64load_deref.0']
2023-05-29 21:55:55,789   run - DEBUG:end state. edges=[]
2023-05-29 21:55:55,790   run - DEBUG:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
2023-05-29 21:55:55,790   run - DEBUG:stack: []
2023-05-29 21:55:55,790   dispatch - DEBUG:dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
2023-05-29 21:55:55,790   dispatch - DEBUG:stack []
2023-05-29 21:55:55,790   dispatch - DEBUG:dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
2023-05-29 21:55:55,790   dispatch - DEBUG:stack ['$68load_global.0']
2023-05-29 21:55:55,790   dispatch - DEBUG:dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
2023-05-29 21:55:55,790   dispatch - DEBUG:stack ['$68load_global.0', '$const70.1']
2023-05-29 21:55:55,790   dispatch - DEBUG:dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
2023-05-29 21:55:55,790   dispatch - DEBUG:stack ['$72call_function.2']
2023-05-29 21:55:55,790   run - DEBUG:end state. edges=[]
2023-05-29 21:55:55,790   run - DEBUG:pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
2023-05-29 21:55:55,790   run - DEBUG:stack: []
2023-05-29 21:55:55,790   dispatch - DEBUG:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
2023-05-29 21:55:55,790   dispatch - DEBUG:stack []
2023-05-29 21:55:55,790   dispatch - DEBUG:dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
2023-05-29 21:55:55,790   dispatch - DEBUG:stack ['$a84.0']
2023-05-29 21:55:55,790   dispatch - DEBUG:dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
2023-05-29 21:55:55,790   dispatch - DEBUG:stack ['$a84.0', '$const86.1']
2023-05-29 21:55:55,790   dispatch - DEBUG:dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
2023-05-29 21:55:55,790   dispatch - DEBUG:stack ['$88compare_op.2']
2023-05-29 21:55:55,790   run - DEBUG:end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,790   run - DEBUG:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2023-05-29 21:55:55,790   run - DEBUG:pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2023-05-29 21:55:55,790   run - DEBUG:stack: []
2023-05-29 21:55:55,790   dispatch - DEBUG:dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=239)
2023-05-29 21:55:55,790   dispatch - DEBUG:stack []
2023-05-29 21:55:55,790   dispatch - DEBUG:dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=239)
2023-05-29 21:55:55,790   dispatch - DEBUG:stack ['$r146.0']
2023-05-29 21:55:55,790   dispatch - DEBUG:dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
2023-05-29 21:55:55,790   dispatch - DEBUG:stack ['$r146.0', '$a148.1']
2023-05-29 21:55:55,790   dispatch - DEBUG:dispatch pc=152, inst=STORE_FAST(arg=2, lineno=239)
2023-05-29 21:55:55,790   dispatch - DEBUG:stack ['$150inplace_multiply.2']
2023-05-29 21:55:55,790   run - DEBUG:end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,790   run - DEBUG:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2023-05-29 21:55:55,791   run - DEBUG:stack: []
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=240)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack []
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=240)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack ['$exp154.0']
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=240)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack ['$exp154.0', '$const156.1']
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=160, inst=STORE_FAST(arg=4, lineno=240)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack ['$158inplace_rshift.2']
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=241)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack []
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack ['$a162.3']
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack ['$a162.3', '$a164.4']
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=168, inst=STORE_FAST(arg=0, lineno=241)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack ['$166inplace_multiply.5']
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=241)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack []
2023-05-29 21:55:55,791   run - DEBUG:end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
2023-05-29 21:55:55,791   run - DEBUG:pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2023-05-29 21:55:55,791   run - DEBUG:stack: []
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=243)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack []
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=243)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack ['$const176.0']
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack ['$const176.0', '$r178.1']
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=243)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack ['$180binary_true_divide.2']
2023-05-29 21:55:55,791   run - DEBUG:end state. edges=[]
2023-05-29 21:55:55,791   run - DEBUG:pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2023-05-29 21:55:55,791   run - DEBUG:stack: []
2023-05-29 21:55:55,791   dispatch - DEBUG:dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=243)
2023-05-29 21:55:55,791   dispatch - DEBUG:stack []
2023-05-29 21:55:55,792   dispatch - DEBUG:dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=243)
2023-05-29 21:55:55,792   dispatch - DEBUG:stack ['$r184.0']
2023-05-29 21:55:55,792   run - DEBUG:end state. edges=[]
2023-05-29 21:55:55,792   run - DEBUG:pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2023-05-29 21:55:55,792   run - DEBUG:stack: []
2023-05-29 21:55:55,792   dispatch - DEBUG:dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
2023-05-29 21:55:55,792   dispatch - DEBUG:stack []
2023-05-29 21:55:55,792   dispatch - DEBUG:dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
2023-05-29 21:55:55,792   dispatch - DEBUG:stack ['$const92.0']
2023-05-29 21:55:55,792   run - DEBUG:end state. edges=[]
2023-05-29 21:55:55,792   run - DEBUG:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2023-05-29 21:55:55,792   run - DEBUG:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2023-05-29 21:55:55,792   run - DEBUG:pending: deque([State(pc_initial=130 nstack_initial=0)])
2023-05-29 21:55:55,792   _prune_phis - DEBUG:-------------------------Prune PHIs-------------------------
2023-05-29 21:55:55,792   _prune_phis - DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
2023-05-29 21:55:55,792   find_use_defs - DEBUG:defmap: {}
2023-05-29 21:55:55,792   find_use_defs - DEBUG:phismap: defaultdict(<class 'set'>, {})
2023-05-29 21:55:55,792   propagate_phi_map - DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2023-05-29 21:55:55,792   apply_changes - DEBUG:keep phismap: {}
2023-05-29 21:55:55,792   apply_changes - DEBUG:new_out: defaultdict(<class 'dict'>, {})
2023-05-29 21:55:55,792   _prune_phis - DEBUG:----------------------DONE Prune PHIs-----------------------
2023-05-29 21:55:55,792   run - DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
2023-05-29 21:55:55,792   run - DEBUG:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-05-29 21:55:55,793   run - DEBUG:block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-05-29 21:55:55,795   interpret - DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: int64)      ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: int64)     ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: True) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

2023-05-29 21:55:55,807   _run_block_analysis - DEBUG:==== SSA block analysis pass on 0
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: a = arg(0, name=a)
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: b = arg(1, name=b)
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: $2load_deref.0 = freevar(tp: int64)
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: $const4.1 = const(int, 1)
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: $10load_deref.3 = freevar(tp: int64)
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: $const20.7 = const(int, 0)
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: $22compare_op.8 = b < $const20.7
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: bool24 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: branch $24pred, 26, 98
2023-05-29 21:55:55,807   _run_block_analysis - DEBUG:==== SSA block analysis pass on 26
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,807   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, True)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $const38.4 = const(int, 0)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $40compare_op.5 = exp < $const38.4
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: bool42 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: branch $42pred, 44, 48
2023-05-29 21:55:55,808   _run_block_analysis - DEBUG:==== SSA block analysis pass on 44
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: <static> raise <class 'OverflowError'>
2023-05-29 21:55:55,808   _run_block_analysis - DEBUG:==== SSA block analysis pass on 48
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $48load_deref.0 = freevar(is_integer: True)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: bool50 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: jump 52
2023-05-29 21:55:55,808   _run_block_analysis - DEBUG:==== SSA block analysis pass on 52
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $const54.1 = const(int, 0)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $56compare_op.2 = a.1 == $const54.1
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: bool58 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: branch $58pred, 60, 76
2023-05-29 21:55:55,808   _run_block_analysis - DEBUG:==== SSA block analysis pass on 60
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: bool62 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: jump 64
2023-05-29 21:55:55,808   _run_block_analysis - DEBUG:==== SSA block analysis pass on 64
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: $66return_value.1 = cast(value=$64load_deref.0)
2023-05-29 21:55:55,808   _run_ssa_block_pass - DEBUG:on stmt: return $66return_value.1
2023-05-29 21:55:55,809   _run_block_analysis - DEBUG:==== SSA block analysis pass on 76
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $const78.1 = const(int, 1)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $80compare_op.2 = a.1 != $const78.1
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: bool82 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: branch $82pred, 84, 106
2023-05-29 21:55:55,809   _run_block_analysis - DEBUG:==== SSA block analysis pass on 84
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $const86.1 = const(int, -1)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $88compare_op.2 = a.1 != $const86.1
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: bool90 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: branch $90pred, 92, 106
2023-05-29 21:55:55,809   _run_block_analysis - DEBUG:==== SSA block analysis pass on 92
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $const92.0 = const(int, 0)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $94return_value.1 = cast(value=$const92.0)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: return $94return_value.1
2023-05-29 21:55:55,809   _run_block_analysis - DEBUG:==== SSA block analysis pass on 98
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, False)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: exp = b
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: jump 106
2023-05-29 21:55:55,809   _run_block_analysis - DEBUG:==== SSA block analysis pass on 106
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $const108.1 = const(int, 65536)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $110compare_op.2 = exp > $const108.1
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: bool112 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: branch $112pred, 114, 130
2023-05-29 21:55:55,809   _run_block_analysis - DEBUG:==== SSA block analysis pass on 114
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-05-29 21:55:55,809   _run_ssa_block_pass - DEBUG:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: return $128return_value.7
2023-05-29 21:55:55,810   _run_block_analysis - DEBUG:==== SSA block analysis pass on 130
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $const132.1 = const(int, 0)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $134compare_op.2 = exp != $const132.1
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: bool136 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: branch $136pred, 138, 172
2023-05-29 21:55:55,810   _run_block_analysis - DEBUG:==== SSA block analysis pass on 138
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $const140.1 = const(int, 1)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $142binary_and.2 = exp & $const140.1
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: bool144 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: branch $144pred, 146, 154
2023-05-29 21:55:55,810   _run_block_analysis - DEBUG:==== SSA block analysis pass on 146
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: r = $150inplace_multiply.2
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: jump 154
2023-05-29 21:55:55,810   _run_block_analysis - DEBUG:==== SSA block analysis pass on 154
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $const156.1 = const(int, 1)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: exp = $158inplace_rshift.2
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: a.1 = $166inplace_multiply.5
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: jump 130
2023-05-29 21:55:55,810   _run_block_analysis - DEBUG:==== SSA block analysis pass on 172
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: bool174 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,810   _run_ssa_block_pass - DEBUG:on stmt: branch $174pred, 176, 184
2023-05-29 21:55:55,811   _run_block_analysis - DEBUG:==== SSA block analysis pass on 176
2023-05-29 21:55:55,811   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,811   _run_ssa_block_pass - DEBUG:on stmt: $const176.0 = const(float, 1.0)
2023-05-29 21:55:55,811   _run_ssa_block_pass - DEBUG:on stmt: $180binary_true_divide.2 = $const176.0 / r
2023-05-29 21:55:55,811   _run_ssa_block_pass - DEBUG:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-05-29 21:55:55,811   _run_ssa_block_pass - DEBUG:on stmt: return $182return_value.3
2023-05-29 21:55:55,811   _run_block_analysis - DEBUG:==== SSA block analysis pass on 184
2023-05-29 21:55:55,811   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x0000018ACE1A6E80>
2023-05-29 21:55:55,811   _run_ssa_block_pass - DEBUG:on stmt: $186return_value.1 = cast(value=r)
2023-05-29 21:55:55,811   _run_ssa_block_pass - DEBUG:on stmt: return $186return_value.1
2023-05-29 21:55:55,811   _find_defs_violators - DEBUG:defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x0000018ACE1C6520>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x0000018ACE1E3730>],
             '$112pred': [<numba.core.ir.Assign object at 0x0000018ACE1E39A0>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x0000018ACE1E3BE0>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x0000018ACE1E3D60>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x0000018ACE1E5040>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x0000018ACE1E5340>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x0000018ACE1E54F0>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x0000018ACE1E55E0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x0000018ACE1E5A90>],
             '$136pred': [<numba.core.ir.Assign object at 0x0000018ACE1E5D00>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x0000018ACE1E7250>],
             '$144pred': [<numba.core.ir.Assign object at 0x0000018ACE1E74C0>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x0000018ACE1E7970>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x0000018ACE1E7EB0>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x0000018ACE1E9370>],
             '$174pred': [<numba.core.ir.Assign object at 0x0000018ACE1E9820>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000018ACE1E9D30>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x0000018ACE1E9E80>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x0000018ACE1EB220>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x0000018ACE1C6C70>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000018ACE1C6EE0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000018ACE1C0070>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x0000018ACE1DB970>],
             '$42pred': [<numba.core.ir.Assign object at 0x0000018ACE1DBBE0>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x0000018ACE1DBD00>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x0000018ACE1DC040>],
             '$50pred': [<numba.core.ir.Assign object at 0x0000018ACE1DC2E0>],
             '$56compare_op.2': [<numba.core.ir.Assign object at 0x0000018ACE1DC850>],
             '$58pred': [<numba.core.ir.Assign object at 0x0000018ACE1DCAC0>],
             '$60load_deref.0': [<numba.core.ir.Assign object at 0x0000018ACE1DCD00>],
             '$62pred': [<numba.core.ir.Assign object at 0x0000018ACE1DCFA0>],
             '$64load_deref.0': [<numba.core.ir.Assign object at 0x0000018ACE1DE280>],
             '$66return_value.1': [<numba.core.ir.Assign object at 0x0000018ACE1DE400>],
             '$80compare_op.2': [<numba.core.ir.Assign object at 0x0000018ACE1DEF70>],
             '$82pred': [<numba.core.ir.Assign object at 0x0000018ACE1E0220>],
             '$88compare_op.2': [<numba.core.ir.Assign object at 0x0000018ACE1E0730>],
             '$90pred': [<numba.core.ir.Assign object at 0x0000018ACE1E09A0>],
             '$94return_value.1': [<numba.core.ir.Assign object at 0x0000018ACE1E0D60>],
             '$const108.1': [<numba.core.ir.Assign object at 0x0000018ACE1E3580>],
             '$const132.1': [<numba.core.ir.Assign object at 0x0000018ACE1E58E0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x0000018ACE1E70A0>],
             '$const156.1': [<numba.core.ir.Assign object at 0x0000018ACE1E7D00>],
             '$const176.0': [<numba.core.ir.Assign object at 0x0000018ACE1E9A60>],
             '$const20.7': [<numba.core.ir.Assign object at 0x0000018ACE1C6AC0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x0000018ACE1DB7C0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000018ACE1C0340>],
             '$const54.1': [<numba.core.ir.Assign object at 0x0000018ACE1DC6A0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x0000018ACE1DEDC0>],
             '$const86.1': [<numba.core.ir.Assign object at 0x0000018ACE1E0580>],
             '$const92.0': [<numba.core.ir.Assign object at 0x0000018ACE1E0BE0>],
             'a': [<numba.core.ir.Assign object at 0x0000018ACE1C0730>],
             'a.1': [<numba.core.ir.Assign object at 0x0000018ACE1C6760>,
                     <numba.core.ir.Assign object at 0x0000018ACE1E9430>],
             'b': [<numba.core.ir.Assign object at 0x0000018ACE1C0640>],
             'bool112': [<numba.core.ir.Assign object at 0x0000018ACE1E3880>],
             'bool136': [<numba.core.ir.Assign object at 0x0000018ACE1E5BE0>],
             'bool144': [<numba.core.ir.Assign object at 0x0000018ACE1E73A0>],
             'bool174': [<numba.core.ir.Assign object at 0x0000018ACE1E9700>],
             'bool24': [<numba.core.ir.Assign object at 0x0000018ACE1C6DC0>],
             'bool42': [<numba.core.ir.Assign object at 0x0000018ACE1DBAC0>],
             'bool50': [<numba.core.ir.Assign object at 0x0000018ACE1DC1C0>],
             'bool58': [<numba.core.ir.Assign object at 0x0000018ACE1DC9A0>],
             'bool62': [<numba.core.ir.Assign object at 0x0000018ACE1DCE80>],
             'bool82': [<numba.core.ir.Assign object at 0x0000018ACE1E0100>],
             'bool90': [<numba.core.ir.Assign object at 0x0000018ACE1E0880>],
             'exp': [<numba.core.ir.Assign object at 0x0000018ACE1DB400>,
                     <numba.core.ir.Assign object at 0x0000018ACE1E3310>,
                     <numba.core.ir.Assign object at 0x0000018ACE1E7F70>],
             'invert': [<numba.core.ir.Assign object at 0x0000018ACE1DB040>,
                        <numba.core.ir.Assign object at 0x0000018ACE1E3040>],
             'r': [<numba.core.ir.Assign object at 0x0000018ACE1C08B0>,
                   <numba.core.ir.Assign object at 0x0000018ACE1E7A30>]})
2023-05-29 21:55:55,811   _find_defs_violators - DEBUG:SSA violators {'exp', 'r', 'invert', 'a.1'}
2023-05-29 21:55:55,811   _run_ssa - DEBUG:Fix SSA violator on var exp
2023-05-29 21:55:55,811   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 0
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: a = arg(0, name=a)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: b = arg(1, name=b)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: $2load_deref.0 = freevar(tp: int64)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: $const4.1 = const(int, 1)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: $10load_deref.3 = freevar(tp: int64)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: $const20.7 = const(int, 0)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: $22compare_op.8 = b < $const20.7
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: bool24 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: branch $24pred, 26, 98
2023-05-29 21:55:55,812   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 26
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, True)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-05-29 21:55:55,812   on_assign - DEBUG:first assign: exp
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:replaced with: exp = unary(fn=<built-in function neg>, value=b)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: $const38.4 = const(int, 0)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: $40compare_op.5 = exp < $const38.4
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: bool42 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: branch $42pred, 44, 48
2023-05-29 21:55:55,812   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 44
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: <static> raise <class 'OverflowError'>
2023-05-29 21:55:55,812   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 48
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: $48load_deref.0 = freevar(is_integer: True)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: bool50 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:on stmt: jump 52
2023-05-29 21:55:55,812   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 52
2023-05-29 21:55:55,812   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $const54.1 = const(int, 0)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $56compare_op.2 = a.1 == $const54.1
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: bool58 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: branch $58pred, 60, 76
2023-05-29 21:55:55,813   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 60
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: bool62 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: jump 64
2023-05-29 21:55:55,813   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 64
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $66return_value.1 = cast(value=$64load_deref.0)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: return $66return_value.1
2023-05-29 21:55:55,813   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 76
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $const78.1 = const(int, 1)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $80compare_op.2 = a.1 != $const78.1
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: bool82 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: branch $82pred, 84, 106
2023-05-29 21:55:55,813   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 84
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $const86.1 = const(int, -1)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $88compare_op.2 = a.1 != $const86.1
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: bool90 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: branch $90pred, 92, 106
2023-05-29 21:55:55,813   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 92
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $const92.0 = const(int, 0)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: $94return_value.1 = cast(value=$const92.0)
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:on stmt: return $94return_value.1
2023-05-29 21:55:55,813   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 98
2023-05-29 21:55:55,813   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, False)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: exp = b
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:replaced with: exp.1 = b
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: jump 106
2023-05-29 21:55:55,814   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 106
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $const108.1 = const(int, 65536)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $110compare_op.2 = exp > $const108.1
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: bool112 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: branch $112pred, 114, 130
2023-05-29 21:55:55,814   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 114
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: return $128return_value.7
2023-05-29 21:55:55,814   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 130
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $const132.1 = const(int, 0)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $134compare_op.2 = exp != $const132.1
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: bool136 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: branch $136pred, 138, 172
2023-05-29 21:55:55,814   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 138
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,814   _run_ssa_block_pass - DEBUG:on stmt: $const140.1 = const(int, 1)
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: $142binary_and.2 = exp & $const140.1
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: bool144 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: branch $144pred, 146, 154
2023-05-29 21:55:55,815   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 146
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: r = $150inplace_multiply.2
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: jump 154
2023-05-29 21:55:55,815   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 154
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: $const156.1 = const(int, 1)
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: exp = $158inplace_rshift.2
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:replaced with: exp.2 = $158inplace_rshift.2
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: a.1 = $166inplace_multiply.5
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: jump 130
2023-05-29 21:55:55,815   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 172
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: bool174 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: branch $174pred, 176, 184
2023-05-29 21:55:55,815   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 176
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: $const176.0 = const(float, 1.0)
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: $180binary_true_divide.2 = $const176.0 / r
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-05-29 21:55:55,815   _run_ssa_block_pass - DEBUG:on stmt: return $182return_value.3
2023-05-29 21:55:55,816   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 184
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: $186return_value.1 = cast(value=r)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: return $186return_value.1
2023-05-29 21:55:55,816   _run_ssa - DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000018ACE1B53D0>],
             98: [<numba.core.ir.Assign object at 0x0000018ACE1B52E0>],
             154: [<numba.core.ir.Assign object at 0x0000018ACE1C0760>]})
2023-05-29 21:55:55,816   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 0
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: a = arg(0, name=a)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: b = arg(1, name=b)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: $2load_deref.0 = freevar(tp: int64)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: $const4.1 = const(int, 1)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: $10load_deref.3 = freevar(tp: int64)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: $const20.7 = const(int, 0)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: $22compare_op.8 = b < $const20.7
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: bool24 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: branch $24pred, 26, 98
2023-05-29 21:55:55,816   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 26
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, True)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: $const38.4 = const(int, 0)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: $40compare_op.5 = exp < $const38.4
2023-05-29 21:55:55,816   _find_def - DEBUG:find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: bool42 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: branch $42pred, 44, 48
2023-05-29 21:55:55,816   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 44
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,816   _run_ssa_block_pass - DEBUG:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: <static> raise <class 'OverflowError'>
2023-05-29 21:55:55,817   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 48
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: $48load_deref.0 = freevar(is_integer: True)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: bool50 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: jump 52
2023-05-29 21:55:55,817   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 52
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: $const54.1 = const(int, 0)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: $56compare_op.2 = a.1 == $const54.1
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: bool58 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: branch $58pred, 60, 76
2023-05-29 21:55:55,817   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 60
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: bool62 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: jump 64
2023-05-29 21:55:55,817   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 64
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: $66return_value.1 = cast(value=$64load_deref.0)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: return $66return_value.1
2023-05-29 21:55:55,817   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 76
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: $const78.1 = const(int, 1)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: $80compare_op.2 = a.1 != $const78.1
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: bool82 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:on stmt: branch $82pred, 84, 106
2023-05-29 21:55:55,817   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 84
2023-05-29 21:55:55,817   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: $const86.1 = const(int, -1)
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: $88compare_op.2 = a.1 != $const86.1
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: bool90 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: branch $90pred, 92, 106
2023-05-29 21:55:55,818   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 92
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: $const92.0 = const(int, 0)
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: $94return_value.1 = cast(value=$const92.0)
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: return $94return_value.1
2023-05-29 21:55:55,818   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 98
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, False)
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: exp.1 = b
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: jump 106
2023-05-29 21:55:55,818   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 106
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: $const108.1 = const(int, 65536)
2023-05-29 21:55:55,818   _run_ssa_block_pass - DEBUG:on stmt: $110compare_op.2 = exp > $const108.1
2023-05-29 21:55:55,818   _find_def - DEBUG:find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
2023-05-29 21:55:55,818   _find_def_from_top - DEBUG:find_def_from_top label 106
2023-05-29 21:55:55,818   _find_def_from_top - DEBUG:insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
2023-05-29 21:55:55,818   _find_def_from_bottom - DEBUG:find_def_from_bottom label 98
2023-05-29 21:55:55,818   _find_def_from_top - DEBUG:incoming_def exp.1 = b
2023-05-29 21:55:55,818   _find_def_from_bottom - DEBUG:find_def_from_bottom label 76
2023-05-29 21:55:55,818   _find_def_from_top - DEBUG:find_def_from_top label 76
2023-05-29 21:55:55,818   _find_def_from_top - DEBUG:idom 52 from label 76
2023-05-29 21:55:55,818   _find_def_from_bottom - DEBUG:find_def_from_bottom label 52
2023-05-29 21:55:55,818   _find_def_from_top - DEBUG:find_def_from_top label 52
2023-05-29 21:55:55,818   _find_def_from_top - DEBUG:idom 48 from label 52
2023-05-29 21:55:55,818   _find_def_from_bottom - DEBUG:find_def_from_bottom label 48
2023-05-29 21:55:55,818   _find_def_from_top - DEBUG:find_def_from_top label 48
2023-05-29 21:55:55,818   _find_def_from_top - DEBUG:idom 26 from label 48
2023-05-29 21:55:55,818   _find_def_from_bottom - DEBUG:find_def_from_bottom label 26
2023-05-29 21:55:55,818   _find_def_from_top - DEBUG:incoming_def exp = unary(fn=<built-in function neg>, value=b)
2023-05-29 21:55:55,818   _find_def_from_bottom - DEBUG:find_def_from_bottom label 84
2023-05-29 21:55:55,819   _find_def_from_top - DEBUG:find_def_from_top label 84
2023-05-29 21:55:55,819   _find_def_from_top - DEBUG:idom 76 from label 84
2023-05-29 21:55:55,819   _find_def_from_bottom - DEBUG:find_def_from_bottom label 76
2023-05-29 21:55:55,819   _find_def_from_top - DEBUG:find_def_from_top label 76
2023-05-29 21:55:55,819   _find_def_from_top - DEBUG:idom 52 from label 76
2023-05-29 21:55:55,819   _find_def_from_bottom - DEBUG:find_def_from_bottom label 52
2023-05-29 21:55:55,819   _find_def_from_top - DEBUG:find_def_from_top label 52
2023-05-29 21:55:55,819   _find_def_from_top - DEBUG:idom 48 from label 52
2023-05-29 21:55:55,819   _find_def_from_bottom - DEBUG:find_def_from_bottom label 48
2023-05-29 21:55:55,819   _find_def_from_top - DEBUG:find_def_from_top label 48
2023-05-29 21:55:55,819   _find_def_from_top - DEBUG:idom 26 from label 48
2023-05-29 21:55:55,819   _find_def_from_bottom - DEBUG:find_def_from_bottom label 26
2023-05-29 21:55:55,819   _find_def_from_top - DEBUG:incoming_def exp = unary(fn=<built-in function neg>, value=b)
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:replaced with: $110compare_op.2 = exp.3 > $const108.1
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:on stmt: bool112 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:on stmt: branch $112pred, 114, 130
2023-05-29 21:55:55,819   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 114
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:on stmt: return $128return_value.7
2023-05-29 21:55:55,819   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 130
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:on stmt: $const132.1 = const(int, 0)
2023-05-29 21:55:55,819   _run_ssa_block_pass - DEBUG:on stmt: $134compare_op.2 = exp != $const132.1
2023-05-29 21:55:55,819   _find_def - DEBUG:find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
2023-05-29 21:55:55,819   _find_def_from_top - DEBUG:find_def_from_top label 130
2023-05-29 21:55:55,819   _find_def_from_top - DEBUG:insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
2023-05-29 21:55:55,819   _find_def_from_bottom - DEBUG:find_def_from_bottom label 106
2023-05-29 21:55:55,820   _find_def_from_top - DEBUG:incoming_def exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:233), Var(exp, numbers.py:220), Var(exp, numbers.py:220)], incoming_blocks=[98, 76, 84])
2023-05-29 21:55:55,820   _find_def_from_bottom - DEBUG:find_def_from_bottom label 154
2023-05-29 21:55:55,820   _find_def_from_top - DEBUG:incoming_def exp.2 = $158inplace_rshift.2
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:replaced with: $134compare_op.2 = exp.4 != $const132.1
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: bool136 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: branch $136pred, 138, 172
2023-05-29 21:55:55,820   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 138
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: $const140.1 = const(int, 1)
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: $142binary_and.2 = exp & $const140.1
2023-05-29 21:55:55,820   _find_def - DEBUG:find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
2023-05-29 21:55:55,820   _find_def_from_top - DEBUG:find_def_from_top label 138
2023-05-29 21:55:55,820   _find_def_from_top - DEBUG:idom 130 from label 138
2023-05-29 21:55:55,820   _find_def_from_bottom - DEBUG:find_def_from_bottom label 130
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:replaced with: $142binary_and.2 = exp.4 & $const140.1
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: bool144 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: branch $144pred, 146, 154
2023-05-29 21:55:55,820   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 146
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: r = $150inplace_multiply.2
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: jump 154
2023-05-29 21:55:55,820   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 154
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: $const156.1 = const(int, 1)
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,820   _find_def - DEBUG:find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,820   _find_def_from_top - DEBUG:find_def_from_top label 154
2023-05-29 21:55:55,820   _find_def_from_top - DEBUG:idom 138 from label 154
2023-05-29 21:55:55,820   _find_def_from_bottom - DEBUG:find_def_from_bottom label 138
2023-05-29 21:55:55,820   _find_def_from_top - DEBUG:find_def_from_top label 138
2023-05-29 21:55:55,820   _find_def_from_top - DEBUG:idom 130 from label 138
2023-05-29 21:55:55,820   _find_def_from_bottom - DEBUG:find_def_from_bottom label 130
2023-05-29 21:55:55,820   _run_ssa_block_pass - DEBUG:replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: exp.2 = $158inplace_rshift.2
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: a.1 = $166inplace_multiply.5
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: jump 130
2023-05-29 21:55:55,821   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 172
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: bool174 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: branch $174pred, 176, 184
2023-05-29 21:55:55,821   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 176
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: $const176.0 = const(float, 1.0)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: $180binary_true_divide.2 = $const176.0 / r
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: return $182return_value.3
2023-05-29 21:55:55,821   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 184
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: $186return_value.1 = cast(value=r)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: return $186return_value.1
2023-05-29 21:55:55,821   _run_ssa - DEBUG:Fix SSA violator on var r
2023-05-29 21:55:55,821   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 0
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: a = arg(0, name=a)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: b = arg(1, name=b)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: $2load_deref.0 = freevar(tp: int64)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: $const4.1 = const(int, 1)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,821   on_assign - DEBUG:first assign: r
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: $10load_deref.3 = freevar(tp: int64)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: $const20.7 = const(int, 0)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: $22compare_op.8 = b < $const20.7
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: bool24 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,821   _run_ssa_block_pass - DEBUG:on stmt: branch $24pred, 26, 98
2023-05-29 21:55:55,822   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 26
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, True)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: $const38.4 = const(int, 0)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: $40compare_op.5 = exp < $const38.4
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: bool42 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: branch $42pred, 44, 48
2023-05-29 21:55:55,822   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 44
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: <static> raise <class 'OverflowError'>
2023-05-29 21:55:55,822   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 48
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: $48load_deref.0 = freevar(is_integer: True)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: bool50 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: jump 52
2023-05-29 21:55:55,822   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 52
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: $const54.1 = const(int, 0)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: $56compare_op.2 = a.1 == $const54.1
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: bool58 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: branch $58pred, 60, 76
2023-05-29 21:55:55,822   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 60
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: bool62 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: jump 64
2023-05-29 21:55:55,822   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 64
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,822   _run_ssa_block_pass - DEBUG:on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: $66return_value.1 = cast(value=$64load_deref.0)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: return $66return_value.1
2023-05-29 21:55:55,823   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 76
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: $const78.1 = const(int, 1)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: $80compare_op.2 = a.1 != $const78.1
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: bool82 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: branch $82pred, 84, 106
2023-05-29 21:55:55,823   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 84
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: $const86.1 = const(int, -1)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: $88compare_op.2 = a.1 != $const86.1
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: bool90 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: branch $90pred, 92, 106
2023-05-29 21:55:55,823   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 92
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: $const92.0 = const(int, 0)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: $94return_value.1 = cast(value=$const92.0)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: return $94return_value.1
2023-05-29 21:55:55,823   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 98
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, False)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: exp.1 = b
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: jump 106
2023-05-29 21:55:55,823   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 106
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:233), Var(exp, numbers.py:220), Var(exp, numbers.py:220)], incoming_blocks=[98, 76, 84])
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: $const108.1 = const(int, 65536)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: $110compare_op.2 = exp.3 > $const108.1
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: bool112 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,823   _run_ssa_block_pass - DEBUG:on stmt: branch $112pred, 114, 130
2023-05-29 21:55:55,823   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 114
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: return $128return_value.7
2023-05-29 21:55:55,824   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 130
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $const132.1 = const(int, 0)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $134compare_op.2 = exp.4 != $const132.1
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: bool136 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: branch $136pred, 138, 172
2023-05-29 21:55:55,824   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 138
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $const140.1 = const(int, 1)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $142binary_and.2 = exp.4 & $const140.1
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: bool144 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: branch $144pred, 146, 154
2023-05-29 21:55:55,824   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 146
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: r = $150inplace_multiply.2
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:replaced with: r.1 = $150inplace_multiply.2
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: jump 154
2023-05-29 21:55:55,824   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 154
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $const156.1 = const(int, 1)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: exp.2 = $158inplace_rshift.2
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: a.1 = $166inplace_multiply.5
2023-05-29 21:55:55,824   _run_ssa_block_pass - DEBUG:on stmt: jump 130
2023-05-29 21:55:55,824   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 172
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: bool174 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: branch $174pred, 176, 184
2023-05-29 21:55:55,825   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 176
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $const176.0 = const(float, 1.0)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $180binary_true_divide.2 = $const176.0 / r
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: return $182return_value.3
2023-05-29 21:55:55,825   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 184
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $186return_value.1 = cast(value=r)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: return $186return_value.1
2023-05-29 21:55:55,825   _run_ssa - DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000018ACE1EB430>],
             146: [<numba.core.ir.Assign object at 0x0000018ACE1B5280>]})
2023-05-29 21:55:55,825   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 0
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: a = arg(0, name=a)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: b = arg(1, name=b)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $2load_deref.0 = freevar(tp: int64)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $const4.1 = const(int, 1)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $10load_deref.3 = freevar(tp: int64)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $const20.7 = const(int, 0)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $22compare_op.8 = b < $const20.7
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: bool24 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: branch $24pred, 26, 98
2023-05-29 21:55:55,825   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 26
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, True)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $const38.4 = const(int, 0)
2023-05-29 21:55:55,825   _run_ssa_block_pass - DEBUG:on stmt: $40compare_op.5 = exp < $const38.4
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: bool42 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: branch $42pred, 44, 48
2023-05-29 21:55:55,826   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 44
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: <static> raise <class 'OverflowError'>
2023-05-29 21:55:55,826   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 48
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $48load_deref.0 = freevar(is_integer: True)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: bool50 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: jump 52
2023-05-29 21:55:55,826   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 52
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $const54.1 = const(int, 0)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $56compare_op.2 = a.1 == $const54.1
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: bool58 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: branch $58pred, 60, 76
2023-05-29 21:55:55,826   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 60
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: bool62 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: jump 64
2023-05-29 21:55:55,826   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 64
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $66return_value.1 = cast(value=$64load_deref.0)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: return $66return_value.1
2023-05-29 21:55:55,826   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 76
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $const78.1 = const(int, 1)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $80compare_op.2 = a.1 != $const78.1
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: bool82 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,826   _run_ssa_block_pass - DEBUG:on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: branch $82pred, 84, 106
2023-05-29 21:55:55,827   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 84
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $const86.1 = const(int, -1)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $88compare_op.2 = a.1 != $const86.1
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: bool90 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: branch $90pred, 92, 106
2023-05-29 21:55:55,827   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 92
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $const92.0 = const(int, 0)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $94return_value.1 = cast(value=$const92.0)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: return $94return_value.1
2023-05-29 21:55:55,827   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 98
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, False)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: exp.1 = b
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: jump 106
2023-05-29 21:55:55,827   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 106
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:233), Var(exp, numbers.py:220), Var(exp, numbers.py:220)], incoming_blocks=[98, 76, 84])
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $const108.1 = const(int, 65536)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $110compare_op.2 = exp.3 > $const108.1
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: bool112 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: branch $112pred, 114, 130
2023-05-29 21:55:55,827   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 114
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:on stmt: return $128return_value.7
2023-05-29 21:55:55,827   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 130
2023-05-29 21:55:55,827   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:on stmt: $const132.1 = const(int, 0)
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:on stmt: $134compare_op.2 = exp.4 != $const132.1
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:on stmt: bool136 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:on stmt: branch $136pred, 138, 172
2023-05-29 21:55:55,828   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 138
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:on stmt: $const140.1 = const(int, 1)
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:on stmt: $142binary_and.2 = exp.4 & $const140.1
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:on stmt: bool144 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:on stmt: branch $144pred, 146, 154
2023-05-29 21:55:55,828   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 146
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,828   _run_ssa_block_pass - DEBUG:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,828   _find_def - DEBUG:find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:find_def_from_top label 146
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:idom 138 from label 146
2023-05-29 21:55:55,828   _find_def_from_bottom - DEBUG:find_def_from_bottom label 138
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:find_def_from_top label 138
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:idom 130 from label 138
2023-05-29 21:55:55,828   _find_def_from_bottom - DEBUG:find_def_from_bottom label 130
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:find_def_from_top label 130
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
2023-05-29 21:55:55,828   _find_def_from_bottom - DEBUG:find_def_from_bottom label 106
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:find_def_from_top label 106
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:idom 0 from label 106
2023-05-29 21:55:55,828   _find_def_from_bottom - DEBUG:find_def_from_bottom label 0
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,828   _find_def_from_bottom - DEBUG:find_def_from_bottom label 154
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:find_def_from_top label 154
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
2023-05-29 21:55:55,828   _find_def_from_bottom - DEBUG:find_def_from_bottom label 138
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:find_def_from_top label 138
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:idom 130 from label 138
2023-05-29 21:55:55,828   _find_def_from_bottom - DEBUG:find_def_from_bottom label 130
2023-05-29 21:55:55,828   _find_def_from_top - DEBUG:incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[106])
2023-05-29 21:55:55,829   _find_def_from_bottom - DEBUG:find_def_from_bottom label 146
2023-05-29 21:55:55,829   _find_def_from_top - DEBUG:incoming_def r.1 = $150inplace_multiply.2
2023-05-29 21:55:55,829   _find_def_from_top - DEBUG:incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2023-05-29 21:55:55,829   _run_ssa_block_pass - DEBUG:replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,829   _run_ssa_block_pass - DEBUG:on stmt: r.1 = $150inplace_multiply.2
2023-05-29 21:55:55,829   _run_ssa_block_pass - DEBUG:on stmt: jump 154
2023-05-29 21:55:55,829   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 154
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:on stmt: $const156.1 = const(int, 1)
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:on stmt: exp.2 = $158inplace_rshift.2
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:on stmt: a.1 = $166inplace_multiply.5
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:on stmt: jump 130
2023-05-29 21:55:55,830   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 172
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:on stmt: bool174 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:on stmt: branch $174pred, 176, 184
2023-05-29 21:55:55,830   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 176
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,830   _run_ssa_block_pass - DEBUG:on stmt: $const176.0 = const(float, 1.0)
2023-05-29 21:55:55,831   _run_ssa_block_pass - DEBUG:on stmt: $180binary_true_divide.2 = $const176.0 / r
2023-05-29 21:55:55,831   _find_def - DEBUG:find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
2023-05-29 21:55:55,831   _find_def_from_top - DEBUG:find_def_from_top label 176
2023-05-29 21:55:55,831   _find_def_from_top - DEBUG:idom 172 from label 176
2023-05-29 21:55:55,831   _find_def_from_bottom - DEBUG:find_def_from_bottom label 172
2023-05-29 21:55:55,831   _find_def_from_top - DEBUG:find_def_from_top label 172
2023-05-29 21:55:55,831   _find_def_from_top - DEBUG:idom 130 from label 172
2023-05-29 21:55:55,831   _find_def_from_bottom - DEBUG:find_def_from_bottom label 130
2023-05-29 21:55:55,831   _run_ssa_block_pass - DEBUG:replaced with: $180binary_true_divide.2 = $const176.0 / r.2
2023-05-29 21:55:55,831   _run_ssa_block_pass - DEBUG:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-05-29 21:55:55,831   _run_ssa_block_pass - DEBUG:on stmt: return $182return_value.3
2023-05-29 21:55:55,831   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 184
2023-05-29 21:55:55,831   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,831   _run_ssa_block_pass - DEBUG:on stmt: $186return_value.1 = cast(value=r)
2023-05-29 21:55:55,831   _find_def - DEBUG:find_def var='r' stmt=$186return_value.1 = cast(value=r)
2023-05-29 21:55:55,831   _find_def_from_top - DEBUG:find_def_from_top label 184
2023-05-29 21:55:55,831   _find_def_from_top - DEBUG:idom 172 from label 184
2023-05-29 21:55:55,831   _find_def_from_bottom - DEBUG:find_def_from_bottom label 172
2023-05-29 21:55:55,832   _find_def_from_top - DEBUG:find_def_from_top label 172
2023-05-29 21:55:55,832   _find_def_from_top - DEBUG:idom 130 from label 172
2023-05-29 21:55:55,832   _find_def_from_bottom - DEBUG:find_def_from_bottom label 130
2023-05-29 21:55:55,832   _run_ssa_block_pass - DEBUG:replaced with: $186return_value.1 = cast(value=r.2)
2023-05-29 21:55:55,832   _run_ssa_block_pass - DEBUG:on stmt: return $186return_value.1
2023-05-29 21:55:55,832   _run_ssa - DEBUG:Fix SSA violator on var invert
2023-05-29 21:55:55,832   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 0
2023-05-29 21:55:55,832   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,832   _run_ssa_block_pass - DEBUG:on stmt: a = arg(0, name=a)
2023-05-29 21:55:55,832   _run_ssa_block_pass - DEBUG:on stmt: b = arg(1, name=b)
2023-05-29 21:55:55,832   _run_ssa_block_pass - DEBUG:on stmt: $2load_deref.0 = freevar(tp: int64)
2023-05-29 21:55:55,832   _run_ssa_block_pass - DEBUG:on stmt: $const4.1 = const(int, 1)
2023-05-29 21:55:55,832   _run_ssa_block_pass - DEBUG:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,832   _run_ssa_block_pass - DEBUG:on stmt: $10load_deref.3 = freevar(tp: int64)
2023-05-29 21:55:55,832   _run_ssa_block_pass - DEBUG:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,832   _run_ssa_block_pass - DEBUG:on stmt: $const20.7 = const(int, 0)
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: $22compare_op.8 = b < $const20.7
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: bool24 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: branch $24pred, 26, 98
2023-05-29 21:55:55,833   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 26
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, True)
2023-05-29 21:55:55,833   on_assign - DEBUG:first assign: invert
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:replaced with: invert = const(bool, True)
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: $const38.4 = const(int, 0)
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: $40compare_op.5 = exp < $const38.4
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: bool42 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: branch $42pred, 44, 48
2023-05-29 21:55:55,833   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 44
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: <static> raise <class 'OverflowError'>
2023-05-29 21:55:55,833   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 48
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: $48load_deref.0 = freevar(is_integer: True)
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: bool50 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,833   _run_ssa_block_pass - DEBUG:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: jump 52
2023-05-29 21:55:55,834   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 52
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $const54.1 = const(int, 0)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $56compare_op.2 = a.1 == $const54.1
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: bool58 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: branch $58pred, 60, 76
2023-05-29 21:55:55,834   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 60
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: bool62 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: jump 64
2023-05-29 21:55:55,834   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 64
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $66return_value.1 = cast(value=$64load_deref.0)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: return $66return_value.1
2023-05-29 21:55:55,834   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 76
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $const78.1 = const(int, 1)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $80compare_op.2 = a.1 != $const78.1
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: bool82 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: branch $82pred, 84, 106
2023-05-29 21:55:55,834   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 84
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $const86.1 = const(int, -1)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $88compare_op.2 = a.1 != $const86.1
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: bool90 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: branch $90pred, 92, 106
2023-05-29 21:55:55,834   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 92
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,834   _run_ssa_block_pass - DEBUG:on stmt: $const92.0 = const(int, 0)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $94return_value.1 = cast(value=$const92.0)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: return $94return_value.1
2023-05-29 21:55:55,835   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 98
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, False)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:replaced with: invert.1 = const(bool, False)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: exp.1 = b
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: jump 106
2023-05-29 21:55:55,835   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 106
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:233), Var(exp, numbers.py:220), Var(exp, numbers.py:220)], incoming_blocks=[98, 76, 84])
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $const108.1 = const(int, 65536)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $110compare_op.2 = exp.3 > $const108.1
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: bool112 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: branch $112pred, 114, 130
2023-05-29 21:55:55,835   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 114
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: return $128return_value.7
2023-05-29 21:55:55,835   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 130
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $const132.1 = const(int, 0)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $134compare_op.2 = exp.4 != $const132.1
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: bool136 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,835   _run_ssa_block_pass - DEBUG:on stmt: branch $136pred, 138, 172
2023-05-29 21:55:55,836   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 138
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: $const140.1 = const(int, 1)
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: $142binary_and.2 = exp.4 & $const140.1
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: bool144 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: branch $144pred, 146, 154
2023-05-29 21:55:55,836   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 146
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: r.1 = $150inplace_multiply.2
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: jump 154
2023-05-29 21:55:55,836   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 154
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: $const156.1 = const(int, 1)
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: exp.2 = $158inplace_rshift.2
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: a.1 = $166inplace_multiply.5
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: jump 130
2023-05-29 21:55:55,836   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 172
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: bool174 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: branch $174pred, 176, 184
2023-05-29 21:55:55,836   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 176
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: $const176.0 = const(float, 1.0)
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: return $182return_value.3
2023-05-29 21:55:55,836   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 184
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: $186return_value.1 = cast(value=r.2)
2023-05-29 21:55:55,836   _run_ssa_block_pass - DEBUG:on stmt: return $186return_value.1
2023-05-29 21:55:55,837   _run_ssa - DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000018ACE1B5C70>],
             98: [<numba.core.ir.Assign object at 0x0000018ACE1B5370>]})
2023-05-29 21:55:55,837   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 0
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: a = arg(0, name=a)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: b = arg(1, name=b)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: $2load_deref.0 = freevar(tp: int64)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: $const4.1 = const(int, 1)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: $10load_deref.3 = freevar(tp: int64)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: $const20.7 = const(int, 0)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: $22compare_op.8 = b < $const20.7
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: bool24 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: branch $24pred, 26, 98
2023-05-29 21:55:55,837   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 26
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, True)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: $const38.4 = const(int, 0)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: $40compare_op.5 = exp < $const38.4
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: bool42 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: branch $42pred, 44, 48
2023-05-29 21:55:55,837   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 44
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: <static> raise <class 'OverflowError'>
2023-05-29 21:55:55,837   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 48
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: $48load_deref.0 = freevar(is_integer: True)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: bool50 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,837   _run_ssa_block_pass - DEBUG:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: jump 52
2023-05-29 21:55:55,838   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 52
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $const54.1 = const(int, 0)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $56compare_op.2 = a.1 == $const54.1
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: bool58 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: branch $58pred, 60, 76
2023-05-29 21:55:55,838   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 60
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: bool62 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: jump 64
2023-05-29 21:55:55,838   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 64
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $66return_value.1 = cast(value=$64load_deref.0)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: return $66return_value.1
2023-05-29 21:55:55,838   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 76
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $const78.1 = const(int, 1)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $80compare_op.2 = a.1 != $const78.1
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: bool82 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: branch $82pred, 84, 106
2023-05-29 21:55:55,838   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 84
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $const86.1 = const(int, -1)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $88compare_op.2 = a.1 != $const86.1
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: bool90 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,838   _run_ssa_block_pass - DEBUG:on stmt: branch $90pred, 92, 106
2023-05-29 21:55:55,838   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 92
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: $const92.0 = const(int, 0)
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: $94return_value.1 = cast(value=$const92.0)
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: return $94return_value.1
2023-05-29 21:55:55,839   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 98
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: invert.1 = const(bool, False)
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: exp.1 = b
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: jump 106
2023-05-29 21:55:55,839   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 106
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:233), Var(exp, numbers.py:220), Var(exp, numbers.py:220)], incoming_blocks=[98, 76, 84])
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: $const108.1 = const(int, 65536)
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: $110compare_op.2 = exp.3 > $const108.1
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: bool112 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: branch $112pred, 114, 130
2023-05-29 21:55:55,839   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 114
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: return $128return_value.7
2023-05-29 21:55:55,839   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 130
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,839   _run_ssa_block_pass - DEBUG:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: $const132.1 = const(int, 0)
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: $134compare_op.2 = exp.4 != $const132.1
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: bool136 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: branch $136pred, 138, 172
2023-05-29 21:55:55,840   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 138
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: $const140.1 = const(int, 1)
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: $142binary_and.2 = exp.4 & $const140.1
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: bool144 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: branch $144pred, 146, 154
2023-05-29 21:55:55,840   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 146
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: r.1 = $150inplace_multiply.2
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: jump 154
2023-05-29 21:55:55,840   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 154
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: $const156.1 = const(int, 1)
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: exp.2 = $158inplace_rshift.2
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: a.1 = $166inplace_multiply.5
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: jump 130
2023-05-29 21:55:55,840   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 172
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,840   _run_ssa_block_pass - DEBUG:on stmt: bool174 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,841   _run_ssa_block_pass - DEBUG:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,841   _find_def - DEBUG:find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:find_def_from_top label 172
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:idom 130 from label 172
2023-05-29 21:55:55,841   _find_def_from_bottom - DEBUG:find_def_from_bottom label 130
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:find_def_from_top label 130
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:idom 106 from label 130
2023-05-29 21:55:55,841   _find_def_from_bottom - DEBUG:find_def_from_bottom label 106
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:find_def_from_top label 106
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
2023-05-29 21:55:55,841   _find_def_from_bottom - DEBUG:find_def_from_bottom label 98
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:incoming_def invert.1 = const(bool, False)
2023-05-29 21:55:55,841   _find_def_from_bottom - DEBUG:find_def_from_bottom label 76
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:find_def_from_top label 76
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:idom 52 from label 76
2023-05-29 21:55:55,841   _find_def_from_bottom - DEBUG:find_def_from_bottom label 52
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:find_def_from_top label 52
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:idom 48 from label 52
2023-05-29 21:55:55,841   _find_def_from_bottom - DEBUG:find_def_from_bottom label 48
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:find_def_from_top label 48
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:idom 26 from label 48
2023-05-29 21:55:55,841   _find_def_from_bottom - DEBUG:find_def_from_bottom label 26
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:incoming_def invert = const(bool, True)
2023-05-29 21:55:55,841   _find_def_from_bottom - DEBUG:find_def_from_bottom label 84
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:find_def_from_top label 84
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:idom 76 from label 84
2023-05-29 21:55:55,841   _find_def_from_bottom - DEBUG:find_def_from_bottom label 76
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:find_def_from_top label 76
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:idom 52 from label 76
2023-05-29 21:55:55,841   _find_def_from_bottom - DEBUG:find_def_from_bottom label 52
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:find_def_from_top label 52
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:idom 48 from label 52
2023-05-29 21:55:55,841   _find_def_from_bottom - DEBUG:find_def_from_bottom label 48
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:find_def_from_top label 48
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:idom 26 from label 48
2023-05-29 21:55:55,841   _find_def_from_bottom - DEBUG:find_def_from_bottom label 26
2023-05-29 21:55:55,841   _find_def_from_top - DEBUG:incoming_def invert = const(bool, True)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: branch $174pred, 176, 184
2023-05-29 21:55:55,842   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 176
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: $const176.0 = const(float, 1.0)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: return $182return_value.3
2023-05-29 21:55:55,842   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 184
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE1EB370>
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: $186return_value.1 = cast(value=r.2)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: return $186return_value.1
2023-05-29 21:55:55,842   _run_ssa - DEBUG:Fix SSA violator on var a.1
2023-05-29 21:55:55,842   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 0
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: a = arg(0, name=a)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: b = arg(1, name=b)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: $2load_deref.0 = freevar(tp: int64)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: $const4.1 = const(int, 1)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: $10load_deref.3 = freevar(tp: int64)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,842   on_assign - DEBUG:first assign: a.1
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: $const20.7 = const(int, 0)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: $22compare_op.8 = b < $const20.7
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: bool24 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,842   _run_ssa_block_pass - DEBUG:on stmt: branch $24pred, 26, 98
2023-05-29 21:55:55,842   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 26
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, True)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $const38.4 = const(int, 0)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $40compare_op.5 = exp < $const38.4
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: bool42 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: branch $42pred, 44, 48
2023-05-29 21:55:55,843   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 44
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: <static> raise <class 'OverflowError'>
2023-05-29 21:55:55,843   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 48
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $48load_deref.0 = freevar(is_integer: True)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: bool50 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: jump 52
2023-05-29 21:55:55,843   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 52
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $const54.1 = const(int, 0)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $56compare_op.2 = a.1 == $const54.1
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: bool58 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: branch $58pred, 60, 76
2023-05-29 21:55:55,843   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 60
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: bool62 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: jump 64
2023-05-29 21:55:55,843   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 64
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: $66return_value.1 = cast(value=$64load_deref.0)
2023-05-29 21:55:55,843   _run_ssa_block_pass - DEBUG:on stmt: return $66return_value.1
2023-05-29 21:55:55,843   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 76
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: $const78.1 = const(int, 1)
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: $80compare_op.2 = a.1 != $const78.1
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: bool82 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: branch $82pred, 84, 106
2023-05-29 21:55:55,844   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 84
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: $const86.1 = const(int, -1)
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: $88compare_op.2 = a.1 != $const86.1
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: bool90 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: branch $90pred, 92, 106
2023-05-29 21:55:55,844   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 92
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: $const92.0 = const(int, 0)
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: $94return_value.1 = cast(value=$const92.0)
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: return $94return_value.1
2023-05-29 21:55:55,844   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 98
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: invert.1 = const(bool, False)
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: exp.1 = b
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: jump 106
2023-05-29 21:55:55,844   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 106
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: invert.2 = phi(incoming_values=[Var(invert.1, numbers.py:232), Var(invert, numbers.py:219), Var(invert, numbers.py:219)], incoming_blocks=[98, 76, 84])
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:233), Var(exp, numbers.py:220), Var(exp, numbers.py:220)], incoming_blocks=[98, 76, 84])
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: $const108.1 = const(int, 65536)
2023-05-29 21:55:55,844   _run_ssa_block_pass - DEBUG:on stmt: $110compare_op.2 = exp.3 > $const108.1
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: bool112 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: branch $112pred, 114, 130
2023-05-29 21:55:55,845   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 114
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: return $128return_value.7
2023-05-29 21:55:55,845   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 130
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: $const132.1 = const(int, 0)
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: $134compare_op.2 = exp.4 != $const132.1
2023-05-29 21:55:55,845   _run_ssa_block_pass - DEBUG:on stmt: bool136 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,846   _run_ssa_block_pass - DEBUG:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,846   _run_ssa_block_pass - DEBUG:on stmt: branch $136pred, 138, 172
2023-05-29 21:55:55,846   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 138
2023-05-29 21:55:55,846   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,846   _run_ssa_block_pass - DEBUG:on stmt: $const140.1 = const(int, 1)
2023-05-29 21:55:55,846   _run_ssa_block_pass - DEBUG:on stmt: $142binary_and.2 = exp.4 & $const140.1
2023-05-29 21:55:55,846   _run_ssa_block_pass - DEBUG:on stmt: bool144 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,846   _run_ssa_block_pass - DEBUG:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,846   _run_ssa_block_pass - DEBUG:on stmt: branch $144pred, 146, 154
2023-05-29 21:55:55,846   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 146
2023-05-29 21:55:55,846   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,846   _run_ssa_block_pass - DEBUG:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,846   _run_ssa_block_pass - DEBUG:on stmt: r.1 = $150inplace_multiply.2
2023-05-29 21:55:55,846   _run_ssa_block_pass - DEBUG:on stmt: jump 154
2023-05-29 21:55:55,846   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 154
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: $const156.1 = const(int, 1)
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: exp.2 = $158inplace_rshift.2
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: a.1 = $166inplace_multiply.5
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:replaced with: a.1.1 = $166inplace_multiply.5
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: jump 130
2023-05-29 21:55:55,847   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 172
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: bool174 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: branch $174pred, 176, 184
2023-05-29 21:55:55,847   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 176
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: $const176.0 = const(float, 1.0)
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-05-29 21:55:55,847   _run_ssa_block_pass - DEBUG:on stmt: return $182return_value.3
2023-05-29 21:55:55,848   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 184
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x0000018ACE1A6E50>
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:on stmt: $186return_value.1 = cast(value=r.2)
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:on stmt: return $186return_value.1
2023-05-29 21:55:55,848   _run_ssa - DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000018ACE1C0D30>],
             154: [<numba.core.ir.Assign object at 0x0000018ACE21F1F0>]})
2023-05-29 21:55:55,848   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 0
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:on stmt: a = arg(0, name=a)
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:on stmt: b = arg(1, name=b)
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:on stmt: $2load_deref.0 = freevar(tp: int64)
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:on stmt: $const4.1 = const(int, 1)
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:on stmt: $10load_deref.3 = freevar(tp: int64)
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:on stmt: $const20.7 = const(int, 0)
2023-05-29 21:55:55,848   _run_ssa_block_pass - DEBUG:on stmt: $22compare_op.8 = b < $const20.7
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: bool24 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: branch $24pred, 26, 98
2023-05-29 21:55:55,849   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 26
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: invert = const(bool, True)
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: $const38.4 = const(int, 0)
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: $40compare_op.5 = exp < $const38.4
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: bool42 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: branch $42pred, 44, 48
2023-05-29 21:55:55,849   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 44
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: <static> raise <class 'OverflowError'>
2023-05-29 21:55:55,849   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 48
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: $48load_deref.0 = freevar(is_integer: True)
2023-05-29 21:55:55,849   _run_ssa_block_pass - DEBUG:on stmt: bool50 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,850   _run_ssa_block_pass - DEBUG:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,850   _run_ssa_block_pass - DEBUG:on stmt: jump 52
2023-05-29 21:55:55,850   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 52
2023-05-29 21:55:55,850   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,850   _run_ssa_block_pass - DEBUG:on stmt: $const54.1 = const(int, 0)
2023-05-29 21:55:55,850   _run_ssa_block_pass - DEBUG:on stmt: $56compare_op.2 = a.1 == $const54.1
2023-05-29 21:55:55,850   _find_def - DEBUG:find_def var='a.1' stmt=$56compare_op.2 = a.1 == $const54.1
2023-05-29 21:55:55,850   _find_def_from_top - DEBUG:find_def_from_top label 52
2023-05-29 21:55:55,850   _find_def_from_top - DEBUG:idom 48 from label 52
2023-05-29 21:55:55,850   _find_def_from_bottom - DEBUG:find_def_from_bottom label 48
2023-05-29 21:55:55,850   _find_def_from_top - DEBUG:find_def_from_top label 48
2023-05-29 21:55:55,850   _find_def_from_top - DEBUG:idom 26 from label 48
2023-05-29 21:55:55,850   _find_def_from_bottom - DEBUG:find_def_from_bottom label 26
2023-05-29 21:55:55,850   _find_def_from_top - DEBUG:find_def_from_top label 26
2023-05-29 21:55:55,850   _find_def_from_top - DEBUG:idom 0 from label 26
2023-05-29 21:55:55,850   _find_def_from_bottom - DEBUG:find_def_from_bottom label 0
2023-05-29 21:55:55,850   _run_ssa_block_pass - DEBUG:on stmt: bool58 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,850   _run_ssa_block_pass - DEBUG:on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:on stmt: branch $58pred, 60, 76
2023-05-29 21:55:55,851   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 60
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:on stmt: bool62 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:on stmt: jump 64
2023-05-29 21:55:55,851   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 64
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:on stmt: $66return_value.1 = cast(value=$64load_deref.0)
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:on stmt: return $66return_value.1
2023-05-29 21:55:55,851   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 76
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:on stmt: $const78.1 = const(int, 1)
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:on stmt: $80compare_op.2 = a.1 != $const78.1
2023-05-29 21:55:55,851   _find_def - DEBUG:find_def var='a.1' stmt=$80compare_op.2 = a.1 != $const78.1
2023-05-29 21:55:55,851   _find_def_from_top - DEBUG:find_def_from_top label 76
2023-05-29 21:55:55,851   _find_def_from_top - DEBUG:idom 52 from label 76
2023-05-29 21:55:55,851   _find_def_from_bottom - DEBUG:find_def_from_bottom label 52
2023-05-29 21:55:55,851   _find_def_from_top - DEBUG:find_def_from_top label 52
2023-05-29 21:55:55,851   _find_def_from_top - DEBUG:idom 48 from label 52
2023-05-29 21:55:55,851   _find_def_from_bottom - DEBUG:find_def_from_bottom label 48
2023-05-29 21:55:55,851   _find_def_from_top - DEBUG:find_def_from_top label 48
2023-05-29 21:55:55,851   _find_def_from_top - DEBUG:idom 26 from label 48
2023-05-29 21:55:55,851   _find_def_from_bottom - DEBUG:find_def_from_bottom label 26
2023-05-29 21:55:55,851   _find_def_from_top - DEBUG:find_def_from_top label 26
2023-05-29 21:55:55,851   _find_def_from_top - DEBUG:idom 0 from label 26
2023-05-29 21:55:55,851   _find_def_from_bottom - DEBUG:find_def_from_bottom label 0
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:on stmt: bool82 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,851   _run_ssa_block_pass - DEBUG:on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:on stmt: branch $82pred, 84, 106
2023-05-29 21:55:55,852   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 84
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:on stmt: $const86.1 = const(int, -1)
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:on stmt: $88compare_op.2 = a.1 != $const86.1
2023-05-29 21:55:55,852   _find_def - DEBUG:find_def var='a.1' stmt=$88compare_op.2 = a.1 != $const86.1
2023-05-29 21:55:55,852   _find_def_from_top - DEBUG:find_def_from_top label 84
2023-05-29 21:55:55,852   _find_def_from_top - DEBUG:idom 76 from label 84
2023-05-29 21:55:55,852   _find_def_from_bottom - DEBUG:find_def_from_bottom label 76
2023-05-29 21:55:55,852   _find_def_from_top - DEBUG:find_def_from_top label 76
2023-05-29 21:55:55,852   _find_def_from_top - DEBUG:idom 52 from label 76
2023-05-29 21:55:55,852   _find_def_from_bottom - DEBUG:find_def_from_bottom label 52
2023-05-29 21:55:55,852   _find_def_from_top - DEBUG:find_def_from_top label 52
2023-05-29 21:55:55,852   _find_def_from_top - DEBUG:idom 48 from label 52
2023-05-29 21:55:55,852   _find_def_from_bottom - DEBUG:find_def_from_bottom label 48
2023-05-29 21:55:55,852   _find_def_from_top - DEBUG:find_def_from_top label 48
2023-05-29 21:55:55,852   _find_def_from_top - DEBUG:idom 26 from label 48
2023-05-29 21:55:55,852   _find_def_from_bottom - DEBUG:find_def_from_bottom label 26
2023-05-29 21:55:55,852   _find_def_from_top - DEBUG:find_def_from_top label 26
2023-05-29 21:55:55,852   _find_def_from_top - DEBUG:idom 0 from label 26
2023-05-29 21:55:55,852   _find_def_from_bottom - DEBUG:find_def_from_bottom label 0
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:on stmt: bool90 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:on stmt: branch $90pred, 92, 106
2023-05-29 21:55:55,852   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 92
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:on stmt: $const92.0 = const(int, 0)
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:on stmt: $94return_value.1 = cast(value=$const92.0)
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:on stmt: return $94return_value.1
2023-05-29 21:55:55,852   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 98
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:on stmt: invert.1 = const(bool, False)
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:on stmt: exp.1 = b
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:on stmt: jump 106
2023-05-29 21:55:55,852   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 106
2023-05-29 21:55:55,852   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: invert.2 = phi(incoming_values=[Var(invert.1, numbers.py:232), Var(invert, numbers.py:219), Var(invert, numbers.py:219)], incoming_blocks=[98, 76, 84])
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:233), Var(exp, numbers.py:220), Var(exp, numbers.py:220)], incoming_blocks=[98, 76, 84])
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: $const108.1 = const(int, 65536)
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: $110compare_op.2 = exp.3 > $const108.1
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: bool112 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: branch $112pred, 114, 130
2023-05-29 21:55:55,853   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 114
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,853   _find_def - DEBUG:find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,853   _find_def_from_top - DEBUG:find_def_from_top label 114
2023-05-29 21:55:55,853   _find_def_from_top - DEBUG:idom 106 from label 114
2023-05-29 21:55:55,853   _find_def_from_bottom - DEBUG:find_def_from_bottom label 106
2023-05-29 21:55:55,853   _find_def_from_top - DEBUG:find_def_from_top label 106
2023-05-29 21:55:55,853   _find_def_from_top - DEBUG:idom 0 from label 106
2023-05-29 21:55:55,853   _find_def_from_bottom - DEBUG:find_def_from_bottom label 0
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: return $128return_value.7
2023-05-29 21:55:55,853   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 130
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: $const132.1 = const(int, 0)
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: $134compare_op.2 = exp.4 != $const132.1
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: bool136 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,853   _run_ssa_block_pass - DEBUG:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:on stmt: branch $136pred, 138, 172
2023-05-29 21:55:55,854   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 138
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:on stmt: $const140.1 = const(int, 1)
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:on stmt: $142binary_and.2 = exp.4 & $const140.1
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:on stmt: bool144 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:on stmt: branch $144pred, 146, 154
2023-05-29 21:55:55,854   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 146
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,854   _find_def - DEBUG:find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,854   _find_def_from_top - DEBUG:find_def_from_top label 146
2023-05-29 21:55:55,854   _find_def_from_top - DEBUG:idom 138 from label 146
2023-05-29 21:55:55,854   _find_def_from_bottom - DEBUG:find_def_from_bottom label 138
2023-05-29 21:55:55,854   _find_def_from_top - DEBUG:find_def_from_top label 138
2023-05-29 21:55:55,854   _find_def_from_top - DEBUG:idom 130 from label 138
2023-05-29 21:55:55,854   _find_def_from_bottom - DEBUG:find_def_from_bottom label 130
2023-05-29 21:55:55,854   _find_def_from_top - DEBUG:find_def_from_top label 130
2023-05-29 21:55:55,854   _find_def_from_top - DEBUG:insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
2023-05-29 21:55:55,854   _find_def_from_bottom - DEBUG:find_def_from_bottom label 106
2023-05-29 21:55:55,854   _find_def_from_top - DEBUG:find_def_from_top label 106
2023-05-29 21:55:55,854   _find_def_from_top - DEBUG:idom 0 from label 106
2023-05-29 21:55:55,854   _find_def_from_bottom - DEBUG:find_def_from_bottom label 0
2023-05-29 21:55:55,854   _find_def_from_top - DEBUG:incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,854   _find_def_from_bottom - DEBUG:find_def_from_bottom label 154
2023-05-29 21:55:55,854   _find_def_from_top - DEBUG:incoming_def a.1.1 = $166inplace_multiply.5
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:on stmt: r.1 = $150inplace_multiply.2
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:on stmt: jump 154
2023-05-29 21:55:55,854   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 154
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2023-05-29 21:55:55,854   _run_ssa_block_pass - DEBUG:on stmt: $const156.1 = const(int, 1)
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: exp.2 = $158inplace_rshift.2
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,855   _find_def - DEBUG:find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,855   _find_def_from_top - DEBUG:find_def_from_top label 154
2023-05-29 21:55:55,855   _find_def_from_top - DEBUG:idom 138 from label 154
2023-05-29 21:55:55,855   _find_def_from_bottom - DEBUG:find_def_from_bottom label 138
2023-05-29 21:55:55,855   _find_def_from_top - DEBUG:find_def_from_top label 138
2023-05-29 21:55:55,855   _find_def_from_top - DEBUG:idom 130 from label 138
2023-05-29 21:55:55,855   _find_def_from_bottom - DEBUG:find_def_from_bottom label 130
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: a.1.1 = $166inplace_multiply.5
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: jump 130
2023-05-29 21:55:55,855   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 172
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: bool174 = global(bool: <class 'bool'>)
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: branch $174pred, 176, 184
2023-05-29 21:55:55,855   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 176
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: $const176.0 = const(float, 1.0)
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: return $182return_value.3
2023-05-29 21:55:55,855   _run_block_rewrite - DEBUG:==== SSA block rewrite pass on 184
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x0000018ACE21ED30>
2023-05-29 21:55:55,855   _run_ssa_block_pass - DEBUG:on stmt: $186return_value.1 = cast(value=r.2)
2023-05-29 21:55:55,856   _run_ssa_block_pass - DEBUG:on stmt: return $186return_value.1
2023-05-29 21:55:55,971   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:55:55,971   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:55:55,973   safe_cuda_api_call - DEBUG:call runtime api: cudaRuntimeGetVersion
2023-05-29 21:55:56,013   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:55:56,014   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:55:56,014   safe_cuda_api_call - DEBUG:call driver api: cuLinkCreate_v2
2023-05-29 21:55:56,015   safe_cuda_api_call - DEBUG:call driver api: cuLinkAddData_v2
2023-05-29 21:55:56,052   safe_cuda_api_call - DEBUG:call driver api: cuLinkComplete
2023-05-29 21:55:56,053   safe_cuda_api_call - DEBUG:call driver api: cuLinkDestroy
2023-05-29 21:55:56,053   safe_cuda_api_call - DEBUG:call driver api: cuModuleLoadDataEx
2023-05-29 21:55:56,054   safe_cuda_api_call - DEBUG:call driver api: cuModuleGetFunction
2023-05-29 21:55:56,054   safe_cuda_api_call - DEBUG:call driver api: cuFuncGetAttribute
2023-05-29 21:55:56,054   safe_cuda_api_call - DEBUG:call driver api: cuFuncGetAttribute
2023-05-29 21:55:56,054   safe_cuda_api_call - DEBUG:call driver api: cuFuncGetAttribute
2023-05-29 21:55:56,054   safe_cuda_api_call - DEBUG:call driver api: cuFuncGetAttribute
2023-05-29 21:55:56,054   safe_cuda_api_call - DEBUG:call driver api: cuFuncGetAttribute
2023-05-29 21:55:56,054   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:55:56,054   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:55:56,054   safe_cuda_api_call - DEBUG:call driver api: cuLaunchKernel
2023-05-29 21:55:56,055   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:55:56,055   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:55:56,055   safe_cuda_api_call - DEBUG:call driver api: cuMemcpyDtoH_v2
2023-05-29 21:56:38,408   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:56:38,408   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:56:38,409   safe_cuda_api_call - DEBUG:call driver api: cuMemAlloc_v2
2023-05-29 21:56:38,409   safe_cuda_api_call - DEBUG:call driver api: cuMemcpyHtoD_v2
2023-05-29 21:56:38,435   add_item - INFO:add pending dealloc: cuMemFree_v2 33600000 bytes
2023-05-29 21:56:38,435   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:56:38,436   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:56:38,436   safe_cuda_api_call - DEBUG:call driver api: cuMemAlloc_v2
2023-05-29 21:56:38,436   add_item - INFO:add pending dealloc: cuMemFree_v2 39200 bytes
2023-05-29 21:56:38,436   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:56:38,436   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:56:38,436   safe_cuda_api_call - DEBUG:call driver api: cuLaunchKernel
2023-05-29 21:56:38,436   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:56:38,436   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:56:38,436   safe_cuda_api_call - DEBUG:call driver api: cuMemcpyDtoH_v2
2023-05-29 21:58:03,598   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:58:03,598   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:58:03,598   safe_cuda_api_call - DEBUG:call driver api: cuMemAlloc_v2
2023-05-29 21:58:03,599   safe_cuda_api_call - DEBUG:call driver api: cuMemcpyHtoD_v2
2023-05-29 21:58:03,599   add_item - INFO:add pending dealloc: cuMemFree_v2 33600000 bytes
2023-05-29 21:58:03,599   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:58:03,599   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:58:03,599   safe_cuda_api_call - DEBUG:call driver api: cuMemAlloc_v2
2023-05-29 21:58:03,600   safe_cuda_api_call - DEBUG:call driver api: cuMemcpyHtoD_v2
2023-05-29 21:58:03,600   add_item - INFO:add pending dealloc: cuMemFree_v2 39200 bytes
2023-05-29 21:58:03,601   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:58:03,601   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:58:03,601   safe_cuda_api_call - DEBUG:call driver api: cuLaunchKernel
2023-05-29 21:58:03,601   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:58:03,601   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:58:03,601   safe_cuda_api_call - DEBUG:call driver api: cuMemcpyDtoH_v2
2023-05-29 21:58:24,405   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:58:24,405   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:58:24,405   safe_cuda_api_call - DEBUG:call driver api: cuMemAlloc_v2
2023-05-29 21:58:24,406   safe_cuda_api_call - DEBUG:call driver api: cuMemcpyHtoD_v2
2023-05-29 21:58:24,406   add_item - INFO:add pending dealloc: cuMemFree_v2 960000 bytes
2023-05-29 21:58:24,407   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:58:24,407   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:58:24,407   safe_cuda_api_call - DEBUG:call driver api: cuMemAlloc_v2
2023-05-29 21:58:24,407   safe_cuda_api_call - DEBUG:call driver api: cuMemcpyHtoD_v2
2023-05-29 21:58:24,407   add_item - INFO:add pending dealloc: cuMemFree_v2 32 bytes
2023-05-29 21:58:24,407   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:58:24,408   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:58:24,408   safe_cuda_api_call - DEBUG:call driver api: cuLaunchKernel
2023-05-29 21:58:24,408   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetCurrent
2023-05-29 21:58:24,408   safe_cuda_api_call - DEBUG:call driver api: cuCtxGetDevice
2023-05-29 21:58:24,409   safe_cuda_api_call - DEBUG:call driver api: cuMemcpyDtoH_v2
